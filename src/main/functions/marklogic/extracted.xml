<functions>
    <function>
        <prefix>cts</prefix>
        <name>aggregate</name>
        <arity>4</arity>
        <arguments>$native-plugin as xs:string, $aggregate-name as xs:string, $range-indexes as cts:reference*, $argument as item()*</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>aggregate</name>
        <arity>5</arity>
        <arguments>$native-plugin as xs:string, $aggregate-name as xs:string, $range-indexes as cts:reference*, $argument as item()*, $options as xs:string*</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>aggregate</name>
        <arity>6</arity>
        <arguments>$native-plugin as xs:string, $aggregate-name as xs:string, $range-indexes as cts:reference*, $argument as item()*, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>aggregate</name>
        <arity>7</arity>
        <arguments>$native-plugin as xs:string, $aggregate-name as xs:string, $range-indexes as cts:reference*, $argument as item()*, $options as xs:string*, $query as cts:query?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>and-not-query</name>
        <arity>2</arity>
        <arguments>$positive-query as cts:query, $negative-query as cts:query</arguments>
        <returnType>cts:and-not-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>and-not-query-negative-query</name>
        <arity>1</arity>
        <arguments>$query as cts:and-not-query</arguments>
        <returnType>cts:query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>and-not-query-positive-query</name>
        <arity>1</arity>
        <arguments>$query as cts:and-not-query</arguments>
        <returnType>cts:query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>and-query</name>
        <arity>1</arity>
        <arguments>$queries as cts:query*</arguments>
        <returnType>cts:and-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>and-query</name>
        <arity>2</arity>
        <arguments>$queries as cts:query*, $options as xs:string*</arguments>
        <returnType>cts:and-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>and-query-options</name>
        <arity>1</arity>
        <arguments>$query as cts:and-query</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>and-query-queries</name>
        <arity>1</arity>
        <arguments>$query as cts:and-query</arguments>
        <returnType>cts:query*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>arc-intersection</name>
        <arity>4</arity>
        <arguments>$p1 as cts:point, $p2 as cts:point, $q1 as cts:point, $q2 as cts:point</arguments>
        <returnType>cts:point</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>arc-intersection</name>
        <arity>5</arity>
        <arguments>$p1 as cts:point, $p2 as cts:point, $q1 as cts:point, $q2 as cts:point, $options as xs:string*</arguments>
        <returnType>cts:point</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>avg</name>
        <arity>1</arity>
        <arguments>$arg as xs:anyAtomicType*</arguments>
        <returnType>xs:anyAtomicType?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>avg-aggregate</name>
        <arity>1</arity>
        <arguments>$range-index as cts:reference</arguments>
        <returnType>xs:anyAtomicType?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>avg-aggregate</name>
        <arity>2</arity>
        <arguments>$range-index as cts:reference, $options as xs:string*</arguments>
        <returnType>xs:anyAtomicType?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>avg-aggregate</name>
        <arity>3</arity>
        <arguments>$range-index as cts:reference, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>xs:anyAtomicType?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>avg-aggregate</name>
        <arity>4</arity>
        <arguments>$range-index as cts:reference, $options as xs:string*, $query as cts:query?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>xs:anyAtomicType?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>bearing</name>
        <arity>2</arity>
        <arguments>$p1 as cts:point, $p2 as cts:point</arguments>
        <returnType>xs:double</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>bearing</name>
        <arity>3</arity>
        <arguments>$p1 as cts:point, $p2 as cts:point, $options as xs:string*</arguments>
        <returnType>xs:double</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>boost-query</name>
        <arity>2</arity>
        <arguments>$matching-query as cts:query*, $boosting-query as cts:query*</arguments>
        <returnType>cts:boost-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>boost-query-boosting-query</name>
        <arity>1</arity>
        <arguments>$query as cts:boost-query</arguments>
        <returnType>cts:query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>boost-query-matching-query</name>
        <arity>1</arity>
        <arguments>$query as cts:boost-query</arguments>
        <returnType>cts:query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>bounding-boxes</name>
        <arity>1</arity>
        <arguments>$region as cts:region</arguments>
        <returnType>cts:box*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>bounding-boxes</name>
        <arity>2</arity>
        <arguments>$region as cts:region, $options as xs:string*</arguments>
        <returnType>cts:box*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>box</name>
        <arity>4</arity>
        <arguments>$south as xs:float, $west as xs:float, $north as xs:float, $east as xs:float</arguments>
        <returnType>cts:box</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>box-east</name>
        <arity>1</arity>
        <arguments>$box as cts:box</arguments>
        <returnType>xs:float</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>box-intersects</name>
        <arity>2</arity>
        <arguments>$box as cts:box, $region as cts:region*</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>box-intersects</name>
        <arity>3</arity>
        <arguments>$box as cts:box, $region as cts:region*, $options as xs:string*</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>box-north</name>
        <arity>1</arity>
        <arguments>$box as cts:box</arguments>
        <returnType>xs:float</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>box-south</name>
        <arity>1</arity>
        <arguments>$box as cts:box</arguments>
        <returnType>xs:float</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>box-west</name>
        <arity>1</arity>
        <arguments>$box as cts:box</arguments>
        <returnType>xs:float</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>circle</name>
        <arity>2</arity>
        <arguments>$radius as xs:float, $center as cts:point</arguments>
        <returnType>cts:circle</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>circle-center</name>
        <arity>1</arity>
        <arguments>$circle as cts:circle</arguments>
        <returnType>cts:point</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>circle-intersects</name>
        <arity>2</arity>
        <arguments>$circle as cts:circle, $region as cts:region*</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>circle-intersects</name>
        <arity>3</arity>
        <arguments>$circle as cts:circle, $region as cts:region*, $options as xs:string*</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>circle-radius</name>
        <arity>1</arity>
        <arguments>$circle as cts:circle</arguments>
        <returnType>xs:float</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>classify</name>
        <arity>4</arity>
        <arguments>$data-nodes as node()*, $classifier as element(cts:classifier), $options as element()?, $training-nodes as node()*</arguments>
        <returnType>element(cts:label)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>cluster</name>
        <arity>1</arity>
        <arguments>$nodes as node()*</arguments>
        <returnType>element(cts:clustering)</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>cluster</name>
        <arity>2</arity>
        <arguments>$nodes as node()*, $options as element()?</arguments>
        <returnType>element(cts:clustering)</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>collection-match</name>
        <arity>1</arity>
        <arguments>$pattern as xs:string</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>collection-match</name>
        <arity>2</arity>
        <arguments>$pattern as xs:string, $options as xs:string*</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>collection-match</name>
        <arity>3</arity>
        <arguments>$pattern as xs:string, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>collection-match</name>
        <arity>4</arity>
        <arguments>$pattern as xs:string, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>collection-match</name>
        <arity>5</arity>
        <arguments>$pattern as xs:string, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>collection-query</name>
        <arity>1</arity>
        <arguments>$uris as xs:string*</arguments>
        <returnType>cts:collection-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>collection-query-uris</name>
        <arity>1</arity>
        <arguments>$query as cts:collection-query</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>collection-reference</name>
        <arity>0</arity>
        <arguments/>
        <returnType>cts:reference</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>collection-reference</name>
        <arity>1</arity>
        <arguments>$options as xs:string</arguments>
        <returnType>cts:reference</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>collections</name>
        <arity>0</arity>
        <arguments/>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>collections</name>
        <arity>1</arity>
        <arguments>$start as xs:string?</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>collections</name>
        <arity>2</arity>
        <arguments>$start as xs:string?, $options as xs:string*</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>collections</name>
        <arity>3</arity>
        <arguments>$start as xs:string?, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>collections</name>
        <arity>4</arity>
        <arguments>$start as xs:string?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>collections</name>
        <arity>5</arity>
        <arguments>$start as xs:string?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>complex-polygon</name>
        <arity>2</arity>
        <arguments>$outer as cts:polygon, $inner as cts:polygon*</arguments>
        <returnType>cts:complex-polygon</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>complex-polygon-contains</name>
        <arity>2</arity>
        <arguments>$complex-polygon as cts:complex-polygon, $region as cts:region*</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>complex-polygon-contains</name>
        <arity>3</arity>
        <arguments>$complex-polygon as cts:complex-polygon, $region as cts:region*, $options as xs:string*</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>complex-polygon-inner</name>
        <arity>1</arity>
        <arguments>$complexPolygon as cts:complex-polygon</arguments>
        <returnType>cts:polygon*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>complex-polygon-intersects</name>
        <arity>2</arity>
        <arguments>$complex-polygon as cts:complex-polygon, $region as cts:region*</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>complex-polygon-intersects</name>
        <arity>3</arity>
        <arguments>$complex-polygon as cts:complex-polygon, $region as cts:region*, $options as xs:string*</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>complex-polygon-outer</name>
        <arity>1</arity>
        <arguments>$complexPolygon as cts:complex-polygon</arguments>
        <returnType>cts:polygon?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>confidence</name>
        <arity>0</arity>
        <arguments/>
        <returnType>xs:float</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>confidence</name>
        <arity>1</arity>
        <arguments>$node as node()</arguments>
        <returnType>xs:float</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>contains</name>
        <arity>2</arity>
        <arguments>$nodes as item()*, $query as cts:query</arguments>
        <returnType>xs:boolean?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>correlation</name>
        <arity>2</arity>
        <arguments>$value1 as cts:reference, $value2 as cts:reference</arguments>
        <returnType>xs:double?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>correlation</name>
        <arity>3</arity>
        <arguments>$value1 as cts:reference, $value2 as cts:reference, $options as xs:string*</arguments>
        <returnType>xs:double?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>correlation</name>
        <arity>4</arity>
        <arguments>$value1 as cts:reference, $value2 as cts:reference, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>xs:double?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>correlation</name>
        <arity>5</arity>
        <arguments>$value1 as cts:reference, $value2 as cts:reference, $options as xs:string*, $query as cts:query?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>xs:double?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>count</name>
        <arity>1</arity>
        <arguments>$arg as item()*</arguments>
        <returnType>xs:integer</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>count</name>
        <arity>2</arity>
        <arguments>$arg as item()*, $maximum as xs:double</arguments>
        <returnType>xs:integer</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>count-aggregate</name>
        <arity>1</arity>
        <arguments>$range-index as cts:reference</arguments>
        <returnType>xs:integer</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>count-aggregate</name>
        <arity>2</arity>
        <arguments>$range-index as cts:reference, $options as xs:string*</arguments>
        <returnType>xs:integer</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>count-aggregate</name>
        <arity>3</arity>
        <arguments>$range-index as cts:reference, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>xs:integer</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>count-aggregate</name>
        <arity>4</arity>
        <arguments>$range-index as cts:reference, $options as xs:string*, $query as cts:query?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>xs:integer</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>covariance</name>
        <arity>2</arity>
        <arguments>$value1 as cts:reference, $value2 as cts:reference</arguments>
        <returnType>xs:double?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>covariance</name>
        <arity>3</arity>
        <arguments>$value1 as cts:reference, $value2 as cts:reference, $options as xs:string*</arguments>
        <returnType>xs:double?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>covariance</name>
        <arity>4</arity>
        <arguments>$value1 as cts:reference, $value2 as cts:reference, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>xs:double?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>covariance</name>
        <arity>5</arity>
        <arguments>$value1 as cts:reference, $value2 as cts:reference, $options as xs:string*, $query as cts:query?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>xs:double?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>covariance-p</name>
        <arity>2</arity>
        <arguments>$value1 as cts:reference, $value2 as cts:reference</arguments>
        <returnType>xs:double?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>covariance-p</name>
        <arity>3</arity>
        <arguments>$value1 as cts:reference, $value2 as cts:reference, $options as xs:string*</arguments>
        <returnType>xs:double?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>covariance-p</name>
        <arity>4</arity>
        <arguments>$value1 as cts:reference, $value2 as cts:reference, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>xs:double?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>covariance-p</name>
        <arity>5</arity>
        <arguments>$value1 as cts:reference, $value2 as cts:reference, $options as xs:string*, $query as cts:query?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>xs:double?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>deregister</name>
        <arity>1</arity>
        <arguments>$id as xs:unsignedLong</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>destination</name>
        <arity>3</arity>
        <arguments>$p as cts:point, $bearing as xs:double, $distance as xs:double</arguments>
        <returnType>cts:point</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>destination</name>
        <arity>4</arity>
        <arguments>$p as cts:point, $bearing as xs:double, $distance as xs:double, $options as xs:string*</arguments>
        <returnType>cts:point</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>directory-query</name>
        <arity>1</arity>
        <arguments>$uris as xs:string*</arguments>
        <returnType>cts:directory-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>directory-query</name>
        <arity>2</arity>
        <arguments>$uris as xs:string*, $depth as xs:string?</arguments>
        <returnType>cts:directory-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>directory-query-depth</name>
        <arity>1</arity>
        <arguments>$query as cts:directory-query</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>directory-query-uris</name>
        <arity>1</arity>
        <arguments>$query as cts:directory-query</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>distance</name>
        <arity>2</arity>
        <arguments>$p1 as cts:point, $p2 as cts:point</arguments>
        <returnType>xs:double</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>distance</name>
        <arity>3</arity>
        <arguments>$p1 as cts:point, $p2 as cts:point, $options as xs:string*</arguments>
        <returnType>xs:double</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>distinctive-terms</name>
        <arity>1</arity>
        <arguments>$nodes as node()*</arguments>
        <returnType>element(cts:class)</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>distinctive-terms</name>
        <arity>2</arity>
        <arguments>$nodes as node()*, $options as element()?</arguments>
        <returnType>element(cts:class)</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>document-fragment-query</name>
        <arity>1</arity>
        <arguments>$query as cts:query</arguments>
        <returnType>cts:document-fragment-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>document-fragment-query-query</name>
        <arity>1</arity>
        <arguments>$query as cts:document-fragment-query</arguments>
        <returnType>cts:query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>document-query</name>
        <arity>1</arity>
        <arguments>$uris as xs:string*</arguments>
        <returnType>cts:document-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>document-query-uris</name>
        <arity>1</arity>
        <arguments>$query as cts:document-query</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-pair-geospatial-boxes</name>
        <arity>3</arity>
        <arguments>$parent-element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*</arguments>
        <returnType>cts:box*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-pair-geospatial-boxes</name>
        <arity>4</arity>
        <arguments>$parent-element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $latitude-bounds as xs:double*</arguments>
        <returnType>cts:box*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-pair-geospatial-boxes</name>
        <arity>5</arity>
        <arguments>$parent-element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*</arguments>
        <returnType>cts:box*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-pair-geospatial-boxes</name>
        <arity>6</arity>
        <arguments>$parent-element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*, $options as xs:string*</arguments>
        <returnType>cts:box*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-pair-geospatial-boxes</name>
        <arity>7</arity>
        <arguments>$parent-element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>cts:box*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-pair-geospatial-boxes</name>
        <arity>8</arity>
        <arguments>$parent-element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?</arguments>
        <returnType>cts:box*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-pair-geospatial-boxes</name>
        <arity>9</arity>
        <arguments>$parent-element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>cts:box*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-pair-geospatial-query</name>
        <arity>4</arity>
        <arguments>$element-name as xs:QName*, $latitude-attribute-names as xs:QName*, $longitude-attribute-names as xs:QName*, $regions as cts:region*</arguments>
        <returnType>cts:element-attribute-pair-geospatial-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-pair-geospatial-query</name>
        <arity>5</arity>
        <arguments>$element-name as xs:QName*, $latitude-attribute-names as xs:QName*, $longitude-attribute-names as xs:QName*, $regions as cts:region*, $options as xs:string*</arguments>
        <returnType>cts:element-attribute-pair-geospatial-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-pair-geospatial-query</name>
        <arity>6</arity>
        <arguments>$element-name as xs:QName*, $latitude-attribute-names as xs:QName*, $longitude-attribute-names as xs:QName*, $regions as cts:region*, $options as xs:string*, $weight as xs:double?</arguments>
        <returnType>cts:element-attribute-pair-geospatial-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-pair-geospatial-query-element-name</name>
        <arity>1</arity>
        <arguments>$query as cts:element-attribute-pair-geospatial-query</arguments>
        <returnType>xs:QName*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-pair-geospatial-query-latitude-name</name>
        <arity>1</arity>
        <arguments>$query as cts:element-attribute-pair-geospatial-query</arguments>
        <returnType>xs:QName*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-pair-geospatial-query-longitude-name</name>
        <arity>1</arity>
        <arguments>$query as cts:element-attribute-pair-geospatial-query</arguments>
        <returnType>xs:QName*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-pair-geospatial-query-options</name>
        <arity>1</arity>
        <arguments>$query as cts:element-attribute-pair-geospatial-query</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-pair-geospatial-query-region</name>
        <arity>1</arity>
        <arguments>$query as cts:element-attribute-pair-geospatial-query</arguments>
        <returnType>cts:region*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-pair-geospatial-query-weight</name>
        <arity>1</arity>
        <arguments>$query as cts:element-attribute-pair-geospatial-query</arguments>
        <returnType>xs:double</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-pair-geospatial-value-match</name>
        <arity>4</arity>
        <arguments>$element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $pattern as xs:anyAtomicType</arguments>
        <returnType>cts:point*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-pair-geospatial-value-match</name>
        <arity>5</arity>
        <arguments>$element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*</arguments>
        <returnType>cts:point*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-pair-geospatial-value-match</name>
        <arity>6</arity>
        <arguments>$element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>cts:point*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-pair-geospatial-value-match</name>
        <arity>7</arity>
        <arguments>$element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?</arguments>
        <returnType>cts:point*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-pair-geospatial-value-match</name>
        <arity>8</arity>
        <arguments>$element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>cts:point*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-pair-geospatial-values</name>
        <arity>3</arity>
        <arguments>$element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*</arguments>
        <returnType>cts:point*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-pair-geospatial-values</name>
        <arity>4</arity>
        <arguments>$element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $start as cts:point?</arguments>
        <returnType>cts:point*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-pair-geospatial-values</name>
        <arity>5</arity>
        <arguments>$element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $start as cts:point?, $options as xs:string*</arguments>
        <returnType>cts:point*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-pair-geospatial-values</name>
        <arity>6</arity>
        <arguments>$element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $start as cts:point?, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>cts:point*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-pair-geospatial-values</name>
        <arity>7</arity>
        <arguments>$element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $start as cts:point?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?</arguments>
        <returnType>cts:point*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-pair-geospatial-values</name>
        <arity>8</arity>
        <arguments>$element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $start as cts:point?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>cts:point*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-range-query</name>
        <arity>4</arity>
        <arguments>$element-name as xs:QName*, $attribute-name as xs:QName*, $operator as xs:string, $value as xs:anyAtomicType*</arguments>
        <returnType>cts:element-attribute-range-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-range-query</name>
        <arity>5</arity>
        <arguments>$element-name as xs:QName*, $attribute-name as xs:QName*, $operator as xs:string, $value as xs:anyAtomicType*, $options as xs:string*</arguments>
        <returnType>cts:element-attribute-range-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-range-query</name>
        <arity>6</arity>
        <arguments>$element-name as xs:QName*, $attribute-name as xs:QName*, $operator as xs:string, $value as xs:anyAtomicType*, $options as xs:string*, $weight as xs:double?</arguments>
        <returnType>cts:element-attribute-range-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-range-query-attribute-name</name>
        <arity>1</arity>
        <arguments>$query as cts:element-attribute-range-query</arguments>
        <returnType>xs:QName*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-range-query-element-name</name>
        <arity>1</arity>
        <arguments>$query as cts:element-attribute-range-query</arguments>
        <returnType>xs:QName*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-range-query-operator</name>
        <arity>1</arity>
        <arguments>$query as cts:element-attribute-range-query</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-range-query-options</name>
        <arity>1</arity>
        <arguments>$query as cts:element-attribute-range-query</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-range-query-value</name>
        <arity>1</arity>
        <arguments>$query as cts:element-attribute-range-query</arguments>
        <returnType>xs:anyAtomicType*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-range-query-weight</name>
        <arity>1</arity>
        <arguments>$query as cts:element-attribute-range-query</arguments>
        <returnType>xs:double</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-reference</name>
        <arity>2</arity>
        <arguments>$element as xs:QName, $attribute as xs:QName</arguments>
        <returnType>cts:reference</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-reference</name>
        <arity>3</arity>
        <arguments>$element as xs:QName, $attribute as xs:QName, $options as xs:string</arguments>
        <returnType>cts:reference</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-value-co-occurrences</name>
        <arity>4</arity>
        <arguments>$element-name-1 as xs:QName, $attribute-name-1 as xs:QName?, $element-name-2 as xs:QName, $attribute-name-2 as xs:QName?</arguments>
        <returnType>element(cts:co-occurrence)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-value-co-occurrences</name>
        <arity>5</arity>
        <arguments>$element-name-1 as xs:QName, $attribute-name-1 as xs:QName?, $element-name-2 as xs:QName, $attribute-name-2 as xs:QName?, $options as xs:string*</arguments>
        <returnType>element(cts:co-occurrence)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-value-co-occurrences</name>
        <arity>6</arity>
        <arguments>$element-name-1 as xs:QName, $attribute-name-1 as xs:QName?, $element-name-2 as xs:QName, $attribute-name-2 as xs:QName?, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>element(cts:co-occurrence)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-value-co-occurrences</name>
        <arity>7</arity>
        <arguments>$element-name-1 as xs:QName, $attribute-name-1 as xs:QName?, $element-name-2 as xs:QName, $attribute-name-2 as xs:QName?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?</arguments>
        <returnType>element(cts:co-occurrence)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-value-co-occurrences</name>
        <arity>8</arity>
        <arguments>$element-name-1 as xs:QName, $attribute-name-1 as xs:QName?, $element-name-2 as xs:QName, $attribute-name-2 as xs:QName?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>element(cts:co-occurrence)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-value-geospatial-co-occurrences</name>
        <arity>5</arity>
        <arguments>$element-name-1 as xs:QName, $attribute-name-1 as xs:QName?, $geo-element-name as xs:QName, $child-name-1 as xs:QName?, $child-name-2 as xs:QName?</arguments>
        <returnType>element(cts:co-occurrence)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-value-geospatial-co-occurrences</name>
        <arity>6</arity>
        <arguments>$element-name-1 as xs:QName, $attribute-name-1 as xs:QName?, $geo-element-name as xs:QName, $child-name-1 as xs:QName?, $child-name-2 as xs:QName?, $options as xs:string*</arguments>
        <returnType>element(cts:co-occurrence)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-value-geospatial-co-occurrences</name>
        <arity>7</arity>
        <arguments>$element-name-1 as xs:QName, $attribute-name-1 as xs:QName?, $geo-element-name as xs:QName, $child-name-1 as xs:QName?, $child-name-2 as xs:QName?, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>element(cts:co-occurrence)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-value-geospatial-co-occurrences</name>
        <arity>8</arity>
        <arguments>$element-name-1 as xs:QName, $attribute-name-1 as xs:QName?, $geo-element-name as xs:QName, $child-name-1 as xs:QName?, $child-name-2 as xs:QName?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?</arguments>
        <returnType>element(cts:co-occurrence)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-value-geospatial-co-occurrences</name>
        <arity>9</arity>
        <arguments>$element-name-1 as xs:QName, $attribute-name-1 as xs:QName?, $geo-element-name as xs:QName, $child-name-1 as xs:QName?, $child-name-2 as xs:QName?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>element(cts:co-occurrence)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-value-match</name>
        <arity>3</arity>
        <arguments>$element-names as xs:QName*, $attribute-names as xs:QName*, $pattern as xs:anyAtomicType</arguments>
        <returnType>xs:anyAtomicType*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-value-match</name>
        <arity>4</arity>
        <arguments>$element-names as xs:QName*, $attribute-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*</arguments>
        <returnType>xs:anyAtomicType*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-value-match</name>
        <arity>5</arity>
        <arguments>$element-names as xs:QName*, $attribute-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>xs:anyAtomicType*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-value-match</name>
        <arity>6</arity>
        <arguments>$element-names as xs:QName*, $attribute-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?</arguments>
        <returnType>xs:anyAtomicType*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-value-match</name>
        <arity>7</arity>
        <arguments>$element-names as xs:QName*, $attribute-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>xs:anyAtomicType*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-value-query</name>
        <arity>3</arity>
        <arguments>$element-name as xs:QName*, $attribute-name as xs:QName*, $text as xs:string*</arguments>
        <returnType>cts:element-attribute-value-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-value-query</name>
        <arity>4</arity>
        <arguments>$element-name as xs:QName*, $attribute-name as xs:QName*, $text as xs:string*, $options as xs:string*</arguments>
        <returnType>cts:element-attribute-value-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-value-query</name>
        <arity>5</arity>
        <arguments>$element-name as xs:QName*, $attribute-name as xs:QName*, $text as xs:string*, $options as xs:string*, $weight as xs:double?</arguments>
        <returnType>cts:element-attribute-value-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-value-query-attribute-name</name>
        <arity>1</arity>
        <arguments>$query as cts:element-attribute-value-query</arguments>
        <returnType>xs:QName*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-value-query-element-name</name>
        <arity>1</arity>
        <arguments>$query as cts:element-attribute-value-query</arguments>
        <returnType>xs:QName*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-value-query-options</name>
        <arity>1</arity>
        <arguments>$query as cts:element-attribute-value-query</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-value-query-text</name>
        <arity>1</arity>
        <arguments>$query as cts:element-attribute-value-query</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-value-query-weight</name>
        <arity>1</arity>
        <arguments>$query as cts:element-attribute-value-query</arguments>
        <returnType>xs:double</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-value-ranges</name>
        <arity>2</arity>
        <arguments>$element-names as xs:QName*, $attribute-names as xs:QName*</arguments>
        <returnType>element(cts:range)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-value-ranges</name>
        <arity>3</arity>
        <arguments>$element-names as xs:QName*, $attribute-names as xs:QName*, $bounds as xs:anyAtomicType*</arguments>
        <returnType>element(cts:range)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-value-ranges</name>
        <arity>4</arity>
        <arguments>$element-names as xs:QName*, $attribute-names as xs:QName*, $bounds as xs:anyAtomicType*, $options as xs:string*</arguments>
        <returnType>element(cts:range)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-value-ranges</name>
        <arity>5</arity>
        <arguments>$element-names as xs:QName*, $attribute-names as xs:QName*, $bounds as xs:anyAtomicType*, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>element(cts:range)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-value-ranges</name>
        <arity>6</arity>
        <arguments>$element-names as xs:QName*, $attribute-names as xs:QName*, $bounds as xs:anyAtomicType*, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?</arguments>
        <returnType>element(cts:range)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-value-ranges</name>
        <arity>7</arity>
        <arguments>$element-names as xs:QName*, $attribute-names as xs:QName*, $bounds as xs:anyAtomicType*, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>element(cts:range)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-values</name>
        <arity>2</arity>
        <arguments>$element-names as xs:QName*, $attribute-names as xs:QName*</arguments>
        <returnType>xs:anyAtomicType*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-values</name>
        <arity>3</arity>
        <arguments>$element-names as xs:QName*, $attribute-names as xs:QName*, $start as xs:anyAtomicType?</arguments>
        <returnType>xs:anyAtomicType*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-values</name>
        <arity>4</arity>
        <arguments>$element-names as xs:QName*, $attribute-names as xs:QName*, $start as xs:anyAtomicType?, $options as xs:string*</arguments>
        <returnType>xs:anyAtomicType*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-values</name>
        <arity>5</arity>
        <arguments>$element-names as xs:QName*, $attribute-names as xs:QName*, $start as xs:anyAtomicType?, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>xs:anyAtomicType*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-values</name>
        <arity>6</arity>
        <arguments>$element-names as xs:QName*, $attribute-names as xs:QName*, $start as xs:anyAtomicType?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?</arguments>
        <returnType>xs:anyAtomicType*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-values</name>
        <arity>7</arity>
        <arguments>$element-names as xs:QName*, $attribute-names as xs:QName*, $start as xs:anyAtomicType?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>xs:anyAtomicType*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-word-match</name>
        <arity>3</arity>
        <arguments>$element-names as xs:QName*, $attribute-names as xs:QName*, $pattern as xs:string</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-word-match</name>
        <arity>4</arity>
        <arguments>$element-names as xs:QName*, $attribute-names as xs:QName*, $pattern as xs:string, $options as xs:string*</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-word-match</name>
        <arity>5</arity>
        <arguments>$element-names as xs:QName*, $attribute-names as xs:QName*, $pattern as xs:string, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-word-match</name>
        <arity>6</arity>
        <arguments>$element-names as xs:QName*, $attribute-names as xs:QName*, $pattern as xs:string, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-word-match</name>
        <arity>7</arity>
        <arguments>$element-names as xs:QName*, $attribute-names as xs:QName*, $pattern as xs:string, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-word-query</name>
        <arity>3</arity>
        <arguments>$element-name as xs:QName*, $attribute-name as xs:QName*, $text as xs:string*</arguments>
        <returnType>cts:element-attribute-word-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-word-query</name>
        <arity>4</arity>
        <arguments>$element-name as xs:QName*, $attribute-name as xs:QName*, $text as xs:string*, $options as xs:string*</arguments>
        <returnType>cts:element-attribute-word-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-word-query</name>
        <arity>5</arity>
        <arguments>$element-name as xs:QName*, $attribute-name as xs:QName*, $text as xs:string*, $options as xs:string*, $weight as xs:double?</arguments>
        <returnType>cts:element-attribute-word-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-word-query-attribute-name</name>
        <arity>1</arity>
        <arguments>$query as cts:element-attribute-word-query</arguments>
        <returnType>xs:QName*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-word-query-element-name</name>
        <arity>1</arity>
        <arguments>$query as cts:element-attribute-word-query</arguments>
        <returnType>xs:QName*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-word-query-options</name>
        <arity>1</arity>
        <arguments>$query as cts:element-attribute-word-query</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-word-query-text</name>
        <arity>1</arity>
        <arguments>$query as cts:element-attribute-word-query</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-word-query-weight</name>
        <arity>1</arity>
        <arguments>$query as cts:element-attribute-word-query</arguments>
        <returnType>xs:double</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-words</name>
        <arity>2</arity>
        <arguments>$element-names as xs:QName*, $attribute-names as xs:QName*</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-words</name>
        <arity>3</arity>
        <arguments>$element-names as xs:QName*, $attribute-names as xs:QName*, $start as xs:string?</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-words</name>
        <arity>4</arity>
        <arguments>$element-names as xs:QName*, $attribute-names as xs:QName*, $start as xs:string?, $options as xs:string*</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-words</name>
        <arity>5</arity>
        <arguments>$element-names as xs:QName*, $attribute-names as xs:QName*, $start as xs:string?, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-words</name>
        <arity>6</arity>
        <arguments>$element-names as xs:QName*, $attribute-names as xs:QName*, $start as xs:string?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-attribute-words</name>
        <arity>7</arity>
        <arguments>$element-names as xs:QName*, $attribute-names as xs:QName*, $start as xs:string?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-child-geospatial-boxes</name>
        <arity>2</arity>
        <arguments>$parent-element-names as xs:QName*, $child-element-names as xs:QName*</arguments>
        <returnType>cts:box*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-child-geospatial-boxes</name>
        <arity>3</arity>
        <arguments>$parent-element-names as xs:QName*, $child-element-names as xs:QName*, $latitude-bounds as xs:double*</arguments>
        <returnType>cts:box*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-child-geospatial-boxes</name>
        <arity>4</arity>
        <arguments>$parent-element-names as xs:QName*, $child-element-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*</arguments>
        <returnType>cts:box*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-child-geospatial-boxes</name>
        <arity>5</arity>
        <arguments>$parent-element-names as xs:QName*, $child-element-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*, $options as xs:string*</arguments>
        <returnType>cts:box*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-child-geospatial-boxes</name>
        <arity>6</arity>
        <arguments>$parent-element-names as xs:QName*, $child-element-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>cts:box*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-child-geospatial-boxes</name>
        <arity>7</arity>
        <arguments>$parent-element-names as xs:QName*, $child-element-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?</arguments>
        <returnType>cts:box*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-child-geospatial-boxes</name>
        <arity>8</arity>
        <arguments>$parent-element-names as xs:QName*, $child-element-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>cts:box*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-child-geospatial-query</name>
        <arity>3</arity>
        <arguments>$parent-element-name as xs:QName*, $child-element-names as xs:QName*, $regions as cts:region*</arguments>
        <returnType>cts:element-child-geospatial-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-child-geospatial-query</name>
        <arity>4</arity>
        <arguments>$parent-element-name as xs:QName*, $child-element-names as xs:QName*, $regions as cts:region*, $options as xs:string*</arguments>
        <returnType>cts:element-child-geospatial-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-child-geospatial-query</name>
        <arity>5</arity>
        <arguments>$parent-element-name as xs:QName*, $child-element-names as xs:QName*, $regions as cts:region*, $options as xs:string*, $weight as xs:double?</arguments>
        <returnType>cts:element-child-geospatial-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-child-geospatial-query-child-name</name>
        <arity>1</arity>
        <arguments>$query as cts:element-child-geospatial-query</arguments>
        <returnType>xs:QName*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-child-geospatial-query-element-name</name>
        <arity>1</arity>
        <arguments>$query as cts:element-child-geospatial-query</arguments>
        <returnType>xs:QName*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-child-geospatial-query-options</name>
        <arity>1</arity>
        <arguments>$query as cts:element-child-geospatial-query</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-child-geospatial-query-region</name>
        <arity>1</arity>
        <arguments>$query as cts:element-child-geospatial-query</arguments>
        <returnType>cts:region*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-child-geospatial-query-weight</name>
        <arity>1</arity>
        <arguments>$query as cts:element-child-geospatial-query</arguments>
        <returnType>xs:double</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-child-geospatial-value-match</name>
        <arity>3</arity>
        <arguments>$element-names as xs:QName*, $child-names as xs:QName*, $pattern as xs:anyAtomicType</arguments>
        <returnType>cts:point*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-child-geospatial-value-match</name>
        <arity>4</arity>
        <arguments>$element-names as xs:QName*, $child-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*</arguments>
        <returnType>cts:point*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-child-geospatial-value-match</name>
        <arity>5</arity>
        <arguments>$element-names as xs:QName*, $child-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>cts:point*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-child-geospatial-value-match</name>
        <arity>6</arity>
        <arguments>$element-names as xs:QName*, $child-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?</arguments>
        <returnType>cts:point*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-child-geospatial-value-match</name>
        <arity>7</arity>
        <arguments>$element-names as xs:QName*, $child-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>cts:point*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-child-geospatial-values</name>
        <arity>2</arity>
        <arguments>$element-names as xs:QName*, $child-names as xs:QName*</arguments>
        <returnType>cts:point*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-child-geospatial-values</name>
        <arity>3</arity>
        <arguments>$element-names as xs:QName*, $child-names as xs:QName*, $start as cts:point?</arguments>
        <returnType>cts:point*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-child-geospatial-values</name>
        <arity>4</arity>
        <arguments>$element-names as xs:QName*, $child-names as xs:QName*, $start as cts:point?, $options as xs:string*</arguments>
        <returnType>cts:point*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-child-geospatial-values</name>
        <arity>5</arity>
        <arguments>$element-names as xs:QName*, $child-names as xs:QName*, $start as cts:point?, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>cts:point*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-child-geospatial-values</name>
        <arity>6</arity>
        <arguments>$element-names as xs:QName*, $child-names as xs:QName*, $start as cts:point?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?</arguments>
        <returnType>cts:point*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-child-geospatial-values</name>
        <arity>7</arity>
        <arguments>$element-names as xs:QName*, $child-names as xs:QName*, $start as cts:point?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>cts:point*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-geospatial-boxes</name>
        <arity>1</arity>
        <arguments>$element-names as xs:QName*</arguments>
        <returnType>cts:box*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-geospatial-boxes</name>
        <arity>2</arity>
        <arguments>$element-names as xs:QName*, $latitude-bounds as xs:double*</arguments>
        <returnType>cts:box*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-geospatial-boxes</name>
        <arity>3</arity>
        <arguments>$element-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*</arguments>
        <returnType>cts:box*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-geospatial-boxes</name>
        <arity>4</arity>
        <arguments>$element-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*, $options as xs:string*</arguments>
        <returnType>cts:box*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-geospatial-boxes</name>
        <arity>5</arity>
        <arguments>$element-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>cts:box*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-geospatial-boxes</name>
        <arity>6</arity>
        <arguments>$element-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?</arguments>
        <returnType>cts:box*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-geospatial-boxes</name>
        <arity>7</arity>
        <arguments>$element-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>cts:box*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-geospatial-query</name>
        <arity>2</arity>
        <arguments>$element-name as xs:QName*, $regions as cts:region*</arguments>
        <returnType>cts:element-geospatial-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-geospatial-query</name>
        <arity>3</arity>
        <arguments>$element-name as xs:QName*, $regions as cts:region*, $options as xs:string*</arguments>
        <returnType>cts:element-geospatial-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-geospatial-query</name>
        <arity>4</arity>
        <arguments>$element-name as xs:QName*, $regions as cts:region*, $options as xs:string*, $weight as xs:double?</arguments>
        <returnType>cts:element-geospatial-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-geospatial-query-element-name</name>
        <arity>1</arity>
        <arguments>$query as cts:element-geospatial-query</arguments>
        <returnType>xs:QName*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-geospatial-query-options</name>
        <arity>1</arity>
        <arguments>$query as cts:element-geospatial-query</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-geospatial-query-region</name>
        <arity>1</arity>
        <arguments>$query as cts:element-geospatial-query</arguments>
        <returnType>cts:region*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-geospatial-query-weight</name>
        <arity>1</arity>
        <arguments>$query as cts:element-geospatial-query</arguments>
        <returnType>xs:double</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-geospatial-value-match</name>
        <arity>2</arity>
        <arguments>$element-names as xs:QName*, $pattern as xs:anyAtomicType</arguments>
        <returnType>cts:point*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-geospatial-value-match</name>
        <arity>3</arity>
        <arguments>$element-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*</arguments>
        <returnType>cts:point*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-geospatial-value-match</name>
        <arity>4</arity>
        <arguments>$element-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>cts:point*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-geospatial-value-match</name>
        <arity>5</arity>
        <arguments>$element-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?</arguments>
        <returnType>cts:point*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-geospatial-value-match</name>
        <arity>6</arity>
        <arguments>$element-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>cts:point*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-geospatial-values</name>
        <arity>1</arity>
        <arguments>$element-names as xs:QName*</arguments>
        <returnType>cts:point*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-geospatial-values</name>
        <arity>2</arity>
        <arguments>$element-names as xs:QName*, $start as cts:point?</arguments>
        <returnType>cts:point*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-geospatial-values</name>
        <arity>3</arity>
        <arguments>$element-names as xs:QName*, $start as cts:point?, $options as xs:string*</arguments>
        <returnType>cts:point*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-geospatial-values</name>
        <arity>4</arity>
        <arguments>$element-names as xs:QName*, $start as cts:point?, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>cts:point*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-geospatial-values</name>
        <arity>5</arity>
        <arguments>$element-names as xs:QName*, $start as cts:point?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?</arguments>
        <returnType>cts:point*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-geospatial-values</name>
        <arity>6</arity>
        <arguments>$element-names as xs:QName*, $start as cts:point?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>cts:point*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-pair-geospatial-boxes</name>
        <arity>3</arity>
        <arguments>$parent-element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*</arguments>
        <returnType>cts:box*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-pair-geospatial-boxes</name>
        <arity>4</arity>
        <arguments>$parent-element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $latitude-bounds as xs:double*</arguments>
        <returnType>cts:box*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-pair-geospatial-boxes</name>
        <arity>5</arity>
        <arguments>$parent-element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*</arguments>
        <returnType>cts:box*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-pair-geospatial-boxes</name>
        <arity>6</arity>
        <arguments>$parent-element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*, $options as xs:string*</arguments>
        <returnType>cts:box*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-pair-geospatial-boxes</name>
        <arity>7</arity>
        <arguments>$parent-element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>cts:box*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-pair-geospatial-boxes</name>
        <arity>8</arity>
        <arguments>$parent-element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?</arguments>
        <returnType>cts:box*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-pair-geospatial-boxes</name>
        <arity>9</arity>
        <arguments>$parent-element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>cts:box*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-pair-geospatial-query</name>
        <arity>4</arity>
        <arguments>$element-name as xs:QName*, $latitude-element-names as xs:QName*, $longitude-element-names as xs:QName*, $regions as cts:region*</arguments>
        <returnType>cts:element-pair-geospatial-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-pair-geospatial-query</name>
        <arity>5</arity>
        <arguments>$element-name as xs:QName*, $latitude-element-names as xs:QName*, $longitude-element-names as xs:QName*, $regions as cts:region*, $options as xs:string*</arguments>
        <returnType>cts:element-pair-geospatial-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-pair-geospatial-query</name>
        <arity>6</arity>
        <arguments>$element-name as xs:QName*, $latitude-element-names as xs:QName*, $longitude-element-names as xs:QName*, $regions as cts:region*, $options as xs:string*, $weight as xs:double?</arguments>
        <returnType>cts:element-pair-geospatial-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-pair-geospatial-query-element-name</name>
        <arity>1</arity>
        <arguments>$query as cts:element-pair-geospatial-query</arguments>
        <returnType>xs:QName*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-pair-geospatial-query-latitude-name</name>
        <arity>1</arity>
        <arguments>$query as cts:element-pair-geospatial-query</arguments>
        <returnType>xs:QName*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-pair-geospatial-query-longitude-name</name>
        <arity>1</arity>
        <arguments>$query as cts:element-pair-geospatial-query</arguments>
        <returnType>xs:QName*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-pair-geospatial-query-options</name>
        <arity>1</arity>
        <arguments>$query as cts:element-pair-geospatial-query</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-pair-geospatial-query-region</name>
        <arity>1</arity>
        <arguments>$query as cts:element-pair-geospatial-query</arguments>
        <returnType>cts:region*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-pair-geospatial-query-weight</name>
        <arity>1</arity>
        <arguments>$query as cts:element-pair-geospatial-query</arguments>
        <returnType>xs:double</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-pair-geospatial-value-match</name>
        <arity>4</arity>
        <arguments>$element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $pattern as xs:anyAtomicType</arguments>
        <returnType>cts:point*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-pair-geospatial-value-match</name>
        <arity>5</arity>
        <arguments>$element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*</arguments>
        <returnType>cts:point*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-pair-geospatial-value-match</name>
        <arity>6</arity>
        <arguments>$element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>cts:point*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-pair-geospatial-value-match</name>
        <arity>7</arity>
        <arguments>$element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?</arguments>
        <returnType>cts:point*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-pair-geospatial-value-match</name>
        <arity>8</arity>
        <arguments>$element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>cts:point*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-pair-geospatial-values</name>
        <arity>3</arity>
        <arguments>$element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*</arguments>
        <returnType>cts:point*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-pair-geospatial-values</name>
        <arity>4</arity>
        <arguments>$element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $start as cts:point?</arguments>
        <returnType>cts:point*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-pair-geospatial-values</name>
        <arity>5</arity>
        <arguments>$element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $start as cts:point?, $options as xs:string*</arguments>
        <returnType>cts:point*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-pair-geospatial-values</name>
        <arity>6</arity>
        <arguments>$element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $start as cts:point?, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>cts:point*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-pair-geospatial-values</name>
        <arity>7</arity>
        <arguments>$element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $start as cts:point?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?</arguments>
        <returnType>cts:point*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-pair-geospatial-values</name>
        <arity>8</arity>
        <arguments>$element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $start as cts:point?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>cts:point*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-query</name>
        <arity>2</arity>
        <arguments>$element-name as xs:QName*, $query as cts:query</arguments>
        <returnType>cts:element-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-query-element-name</name>
        <arity>1</arity>
        <arguments>$query as cts:element-query</arguments>
        <returnType>xs:QName*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-query-query</name>
        <arity>1</arity>
        <arguments>$query as cts:element-query</arguments>
        <returnType>cts:query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-range-query</name>
        <arity>3</arity>
        <arguments>$element-name as xs:QName*, $operator as xs:string, $value as xs:anyAtomicType*</arguments>
        <returnType>cts:element-range-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-range-query</name>
        <arity>4</arity>
        <arguments>$element-name as xs:QName*, $operator as xs:string, $value as xs:anyAtomicType*, $options as xs:string*</arguments>
        <returnType>cts:element-range-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-range-query</name>
        <arity>5</arity>
        <arguments>$element-name as xs:QName*, $operator as xs:string, $value as xs:anyAtomicType*, $options as xs:string*, $weight as xs:double?</arguments>
        <returnType>cts:element-range-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-range-query-element-name</name>
        <arity>1</arity>
        <arguments>$query as cts:element-range-query</arguments>
        <returnType>xs:QName*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-range-query-operator</name>
        <arity>1</arity>
        <arguments>$query as cts:element-range-query</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-range-query-options</name>
        <arity>1</arity>
        <arguments>$query as cts:element-range-query</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-range-query-value</name>
        <arity>1</arity>
        <arguments>$query as cts:element-range-query</arguments>
        <returnType>xs:anyAtomicType*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-range-query-weight</name>
        <arity>1</arity>
        <arguments>$query as cts:element-range-query</arguments>
        <returnType>xs:double</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-reference</name>
        <arity>1</arity>
        <arguments>$element as xs:QName</arguments>
        <returnType>cts:reference</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-reference</name>
        <arity>2</arity>
        <arguments>$element as xs:QName, $options as xs:string</arguments>
        <returnType>cts:reference</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-value-co-occurrences</name>
        <arity>2</arity>
        <arguments>$element-name-1 as xs:QName, $element-name-2 as xs:QName</arguments>
        <returnType>element(cts:co-occurrence)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-value-co-occurrences</name>
        <arity>3</arity>
        <arguments>$element-name-1 as xs:QName, $element-name-2 as xs:QName, $options as xs:string*</arguments>
        <returnType>element(cts:co-occurrence)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-value-co-occurrences</name>
        <arity>4</arity>
        <arguments>$element-name-1 as xs:QName, $element-name-2 as xs:QName, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>element(cts:co-occurrence)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-value-co-occurrences</name>
        <arity>5</arity>
        <arguments>$element-name-1 as xs:QName, $element-name-2 as xs:QName, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?</arguments>
        <returnType>element(cts:co-occurrence)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-value-co-occurrences</name>
        <arity>6</arity>
        <arguments>$element-name-1 as xs:QName, $element-name-2 as xs:QName, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>element(cts:co-occurrence)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-value-geospatial-co-occurrences</name>
        <arity>4</arity>
        <arguments>$element-name-1 as xs:QName, $geo-element-name as xs:QName, $child-name-1 as xs:QName?, $child-name-2 as xs:QName?</arguments>
        <returnType>element(cts:co-occurrence)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-value-geospatial-co-occurrences</name>
        <arity>5</arity>
        <arguments>$element-name-1 as xs:QName, $geo-element-name as xs:QName, $child-name-1 as xs:QName?, $child-name-2 as xs:QName?, $options as xs:string*</arguments>
        <returnType>element(cts:co-occurrence)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-value-geospatial-co-occurrences</name>
        <arity>6</arity>
        <arguments>$element-name-1 as xs:QName, $geo-element-name as xs:QName, $child-name-1 as xs:QName?, $child-name-2 as xs:QName?, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>element(cts:co-occurrence)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-value-geospatial-co-occurrences</name>
        <arity>7</arity>
        <arguments>$element-name-1 as xs:QName, $geo-element-name as xs:QName, $child-name-1 as xs:QName?, $child-name-2 as xs:QName?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?</arguments>
        <returnType>element(cts:co-occurrence)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-value-geospatial-co-occurrences</name>
        <arity>8</arity>
        <arguments>$element-name-1 as xs:QName, $geo-element-name as xs:QName, $child-name-1 as xs:QName?, $child-name-2 as xs:QName?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>element(cts:co-occurrence)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-value-match</name>
        <arity>2</arity>
        <arguments>$element-names as xs:QName*, $pattern as xs:anyAtomicType</arguments>
        <returnType>xs:anyAtomicType*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-value-match</name>
        <arity>3</arity>
        <arguments>$element-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*</arguments>
        <returnType>xs:anyAtomicType*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-value-match</name>
        <arity>4</arity>
        <arguments>$element-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>xs:anyAtomicType*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-value-match</name>
        <arity>5</arity>
        <arguments>$element-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?</arguments>
        <returnType>xs:anyAtomicType*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-value-match</name>
        <arity>6</arity>
        <arguments>$element-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>xs:anyAtomicType*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-value-query</name>
        <arity>2</arity>
        <arguments>$element-name as xs:QName*, $text as xs:string*</arguments>
        <returnType>cts:element-value-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-value-query</name>
        <arity>3</arity>
        <arguments>$element-name as xs:QName*, $text as xs:string*, $options as xs:string*</arguments>
        <returnType>cts:element-value-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-value-query</name>
        <arity>4</arity>
        <arguments>$element-name as xs:QName*, $text as xs:string*, $options as xs:string*, $weight as xs:double?</arguments>
        <returnType>cts:element-value-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-value-query-element-name</name>
        <arity>1</arity>
        <arguments>$query as cts:element-value-query</arguments>
        <returnType>xs:QName*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-value-query-options</name>
        <arity>1</arity>
        <arguments>$query as cts:element-value-query</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-value-query-text</name>
        <arity>1</arity>
        <arguments>$query as cts:element-value-query</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-value-query-weight</name>
        <arity>1</arity>
        <arguments>$query as cts:element-value-query</arguments>
        <returnType>xs:double</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-value-ranges</name>
        <arity>1</arity>
        <arguments>$element-names as xs:QName*</arguments>
        <returnType>element(cts:range)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-value-ranges</name>
        <arity>2</arity>
        <arguments>$element-names as xs:QName*, $bounds as xs:anyAtomicType*</arguments>
        <returnType>element(cts:range)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-value-ranges</name>
        <arity>3</arity>
        <arguments>$element-names as xs:QName*, $bounds as xs:anyAtomicType*, $options as xs:string*</arguments>
        <returnType>element(cts:range)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-value-ranges</name>
        <arity>4</arity>
        <arguments>$element-names as xs:QName*, $bounds as xs:anyAtomicType*, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>element(cts:range)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-value-ranges</name>
        <arity>5</arity>
        <arguments>$element-names as xs:QName*, $bounds as xs:anyAtomicType*, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?</arguments>
        <returnType>element(cts:range)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-value-ranges</name>
        <arity>6</arity>
        <arguments>$element-names as xs:QName*, $bounds as xs:anyAtomicType*, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>element(cts:range)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-values</name>
        <arity>1</arity>
        <arguments>$element-names as xs:QName*</arguments>
        <returnType>xs:anyAtomicType*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-values</name>
        <arity>2</arity>
        <arguments>$element-names as xs:QName*, $start as xs:anyAtomicType?</arguments>
        <returnType>xs:anyAtomicType*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-values</name>
        <arity>3</arity>
        <arguments>$element-names as xs:QName*, $start as xs:anyAtomicType?, $options as xs:string*</arguments>
        <returnType>xs:anyAtomicType*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-values</name>
        <arity>4</arity>
        <arguments>$element-names as xs:QName*, $start as xs:anyAtomicType?, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>xs:anyAtomicType*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-values</name>
        <arity>5</arity>
        <arguments>$element-names as xs:QName*, $start as xs:anyAtomicType?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?</arguments>
        <returnType>xs:anyAtomicType*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-values</name>
        <arity>6</arity>
        <arguments>$element-names as xs:QName*, $start as xs:anyAtomicType?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>xs:anyAtomicType*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-walk</name>
        <arity>3</arity>
        <arguments>$node as node(), $element as xs:QName*, $expr as item()*</arguments>
        <returnType>node()</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-word-match</name>
        <arity>2</arity>
        <arguments>$element-names as xs:QName*, $pattern as xs:string</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-word-match</name>
        <arity>3</arity>
        <arguments>$element-names as xs:QName*, $pattern as xs:string, $options as xs:string*</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-word-match</name>
        <arity>4</arity>
        <arguments>$element-names as xs:QName*, $pattern as xs:string, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-word-match</name>
        <arity>5</arity>
        <arguments>$element-names as xs:QName*, $pattern as xs:string, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-word-match</name>
        <arity>6</arity>
        <arguments>$element-names as xs:QName*, $pattern as xs:string, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-word-query</name>
        <arity>2</arity>
        <arguments>$element-name as xs:QName*, $text as xs:string*</arguments>
        <returnType>cts:element-word-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-word-query</name>
        <arity>3</arity>
        <arguments>$element-name as xs:QName*, $text as xs:string*, $options as xs:string*</arguments>
        <returnType>cts:element-word-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-word-query</name>
        <arity>4</arity>
        <arguments>$element-name as xs:QName*, $text as xs:string*, $options as xs:string*, $weight as xs:double?</arguments>
        <returnType>cts:element-word-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-word-query-element-name</name>
        <arity>1</arity>
        <arguments>$query as cts:element-word-query</arguments>
        <returnType>xs:QName*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-word-query-options</name>
        <arity>1</arity>
        <arguments>$query as cts:element-word-query</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-word-query-text</name>
        <arity>1</arity>
        <arguments>$query as cts:element-word-query</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-word-query-weight</name>
        <arity>1</arity>
        <arguments>$query as cts:element-word-query</arguments>
        <returnType>xs:double</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-words</name>
        <arity>1</arity>
        <arguments>$element-names as xs:QName*</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-words</name>
        <arity>2</arity>
        <arguments>$element-names as xs:QName*, $start as xs:string?</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-words</name>
        <arity>3</arity>
        <arguments>$element-names as xs:QName*, $start as xs:string?, $options as xs:string*</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-words</name>
        <arity>4</arity>
        <arguments>$element-names as xs:QName*, $start as xs:string?, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-words</name>
        <arity>5</arity>
        <arguments>$element-names as xs:QName*, $start as xs:string?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>element-words</name>
        <arity>6</arity>
        <arguments>$element-names as xs:QName*, $start as xs:string?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>entity-highlight</name>
        <arity>2</arity>
        <arguments>$node as node(), $expr as item()*</arguments>
        <returnType>node()</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>field-range-query</name>
        <arity>3</arity>
        <arguments>$field-name as xs:string*, $operator as xs:string, $value as xs:anyAtomicType*</arguments>
        <returnType>cts:field-range-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>field-range-query</name>
        <arity>4</arity>
        <arguments>$field-name as xs:string*, $operator as xs:string, $value as xs:anyAtomicType*, $options as xs:string*</arguments>
        <returnType>cts:field-range-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>field-range-query</name>
        <arity>5</arity>
        <arguments>$field-name as xs:string*, $operator as xs:string, $value as xs:anyAtomicType*, $options as xs:string*, $weight as xs:double?</arguments>
        <returnType>cts:field-range-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>field-range-query-field-name</name>
        <arity>1</arity>
        <arguments>$query as cts:field-range-query</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>field-range-query-operator</name>
        <arity>1</arity>
        <arguments>$query as cts:field-range-query</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>field-range-query-options</name>
        <arity>1</arity>
        <arguments>$query as cts:field-range-query</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>field-range-query-value</name>
        <arity>1</arity>
        <arguments>$query as cts:field-range-query</arguments>
        <returnType>xs:anyAtomicType*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>field-range-query-weight</name>
        <arity>1</arity>
        <arguments>$query as cts:field-range-query</arguments>
        <returnType>xs:double</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>field-reference</name>
        <arity>1</arity>
        <arguments>$field as xs:string</arguments>
        <returnType>cts:reference</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>field-reference</name>
        <arity>2</arity>
        <arguments>$field as xs:string, $options as xs:string</arguments>
        <returnType>cts:reference</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>field-value-co-occurrences</name>
        <arity>2</arity>
        <arguments>$field-name-1 as xs:string, $field-name-2 as xs:string</arguments>
        <returnType>element(cts:co-occurrence)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>field-value-co-occurrences</name>
        <arity>3</arity>
        <arguments>$field-name-1 as xs:string, $field-name-2 as xs:string, $options as xs:string*</arguments>
        <returnType>element(cts:co-occurrence)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>field-value-co-occurrences</name>
        <arity>4</arity>
        <arguments>$field-name-1 as xs:string, $field-name-2 as xs:string, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>element(cts:co-occurrence)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>field-value-co-occurrences</name>
        <arity>5</arity>
        <arguments>$field-name-1 as xs:string, $field-name-2 as xs:string, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?</arguments>
        <returnType>element(cts:co-occurrence)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>field-value-co-occurrences</name>
        <arity>6</arity>
        <arguments>$field-name-1 as xs:string, $field-name-2 as xs:string, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>element(cts:co-occurrence)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>field-value-match</name>
        <arity>2</arity>
        <arguments>$field-names as xs:string*, $pattern as xs:anyAtomicType</arguments>
        <returnType>xs:anyAtomicType*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>field-value-match</name>
        <arity>3</arity>
        <arguments>$field-names as xs:string*, $pattern as xs:anyAtomicType, $options as xs:string*</arguments>
        <returnType>xs:anyAtomicType*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>field-value-match</name>
        <arity>4</arity>
        <arguments>$field-names as xs:string*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>xs:anyAtomicType*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>field-value-match</name>
        <arity>5</arity>
        <arguments>$field-names as xs:string*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?</arguments>
        <returnType>xs:anyAtomicType*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>field-value-match</name>
        <arity>6</arity>
        <arguments>$field-names as xs:string*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>xs:anyAtomicType*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>field-value-query</name>
        <arity>2</arity>
        <arguments>$field-name as xs:string*, $text as xs:string*</arguments>
        <returnType>cts:field-value-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>field-value-query</name>
        <arity>3</arity>
        <arguments>$field-name as xs:string*, $text as xs:string*, $options as xs:string*</arguments>
        <returnType>cts:field-value-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>field-value-query</name>
        <arity>4</arity>
        <arguments>$field-name as xs:string*, $text as xs:string*, $options as xs:string*, $weight as xs:double?</arguments>
        <returnType>cts:field-value-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>field-value-query-field-name</name>
        <arity>1</arity>
        <arguments>$query as cts:field-value-query</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>field-value-query-options</name>
        <arity>1</arity>
        <arguments>$query as cts:field-value-query</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>field-value-query-text</name>
        <arity>1</arity>
        <arguments>$query as cts:field-value-query</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>field-value-query-weight</name>
        <arity>1</arity>
        <arguments>$query as cts:field-value-query</arguments>
        <returnType>xs:double</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>field-value-ranges</name>
        <arity>1</arity>
        <arguments>$field-names as xs:string*</arguments>
        <returnType>element(cts:range)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>field-value-ranges</name>
        <arity>2</arity>
        <arguments>$field-names as xs:string*, $bounds as xs:anyAtomicType*</arguments>
        <returnType>element(cts:range)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>field-value-ranges</name>
        <arity>3</arity>
        <arguments>$field-names as xs:string*, $bounds as xs:anyAtomicType*, $options as xs:string*</arguments>
        <returnType>element(cts:range)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>field-value-ranges</name>
        <arity>4</arity>
        <arguments>$field-names as xs:string*, $bounds as xs:anyAtomicType*, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>element(cts:range)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>field-value-ranges</name>
        <arity>5</arity>
        <arguments>$field-names as xs:string*, $bounds as xs:anyAtomicType*, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?</arguments>
        <returnType>element(cts:range)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>field-value-ranges</name>
        <arity>6</arity>
        <arguments>$field-names as xs:string*, $bounds as xs:anyAtomicType*, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>element(cts:range)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>field-values</name>
        <arity>1</arity>
        <arguments>$field-names as xs:string*</arguments>
        <returnType>xs:anyAtomicType*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>field-values</name>
        <arity>2</arity>
        <arguments>$field-names as xs:string*, $start as xs:anyAtomicType?</arguments>
        <returnType>xs:anyAtomicType*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>field-values</name>
        <arity>3</arity>
        <arguments>$field-names as xs:string*, $start as xs:anyAtomicType?, $options as xs:string*</arguments>
        <returnType>xs:anyAtomicType*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>field-values</name>
        <arity>4</arity>
        <arguments>$field-names as xs:string*, $start as xs:anyAtomicType?, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>xs:anyAtomicType*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>field-values</name>
        <arity>5</arity>
        <arguments>$field-names as xs:string*, $start as xs:anyAtomicType?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?</arguments>
        <returnType>xs:anyAtomicType*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>field-values</name>
        <arity>6</arity>
        <arguments>$field-names as xs:string*, $start as xs:anyAtomicType?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>xs:anyAtomicType*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>field-word-match</name>
        <arity>2</arity>
        <arguments>$field-names as xs:string*, $pattern as xs:string</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>field-word-match</name>
        <arity>3</arity>
        <arguments>$field-names as xs:string*, $pattern as xs:string, $options as xs:string*</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>field-word-match</name>
        <arity>4</arity>
        <arguments>$field-names as xs:string*, $pattern as xs:string, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>field-word-match</name>
        <arity>5</arity>
        <arguments>$field-names as xs:string*, $pattern as xs:string, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>field-word-match</name>
        <arity>6</arity>
        <arguments>$field-names as xs:string*, $pattern as xs:string, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>field-word-query</name>
        <arity>2</arity>
        <arguments>$field-name as xs:string*, $text as xs:string*</arguments>
        <returnType>cts:field-word-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>field-word-query</name>
        <arity>3</arity>
        <arguments>$field-name as xs:string*, $text as xs:string*, $options as xs:string*</arguments>
        <returnType>cts:field-word-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>field-word-query</name>
        <arity>4</arity>
        <arguments>$field-name as xs:string*, $text as xs:string*, $options as xs:string*, $weight as xs:double?</arguments>
        <returnType>cts:field-word-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>field-word-query-field-name</name>
        <arity>1</arity>
        <arguments>$query as cts:field-word-query</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>field-word-query-options</name>
        <arity>1</arity>
        <arguments>$query as cts:field-word-query</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>field-word-query-text</name>
        <arity>1</arity>
        <arguments>$query as cts:field-word-query</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>field-word-query-weight</name>
        <arity>1</arity>
        <arguments>$query as cts:field-word-query</arguments>
        <returnType>xs:double</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>field-words</name>
        <arity>1</arity>
        <arguments>$field-names as xs:string*</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>field-words</name>
        <arity>2</arity>
        <arguments>$field-names as xs:string*, $start as xs:string?</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>field-words</name>
        <arity>3</arity>
        <arguments>$field-names as xs:string*, $start as xs:string?, $options as xs:string*</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>field-words</name>
        <arity>4</arity>
        <arguments>$field-names as xs:string*, $start as xs:string?, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>field-words</name>
        <arity>5</arity>
        <arguments>$field-names as xs:string*, $start as xs:string?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>field-words</name>
        <arity>6</arity>
        <arguments>$field-names as xs:string*, $start as xs:string?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>fitness</name>
        <arity>0</arity>
        <arguments/>
        <returnType>xs:float</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>fitness</name>
        <arity>1</arity>
        <arguments>$node as node()</arguments>
        <returnType>xs:float</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>frequency</name>
        <arity>1</arity>
        <arguments>$value as item()</arguments>
        <returnType>xs:integer</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>geospatial-attribute-pair-reference</name>
        <arity>4</arity>
        <arguments>$element as xs:string, $lat as xs:string, $long as xs:string, $options as xs:string</arguments>
        <returnType>cts:reference</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>geospatial-co-occurrences</name>
        <arity>10</arity>
        <arguments>$geo-element-name-1 as xs:QName, $child-1-name-1 as xs:QName?, $child-1-name-2 as xs:QName?, $geo-element-name-2 as xs:QName, $child-2-name-1 as xs:QName?, $child-2-name-2 as xs:QName?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>element(cts:co-occurrence)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>geospatial-co-occurrences</name>
        <arity>6</arity>
        <arguments>$geo-element-name-1 as xs:QName, $child-1-name-1 as xs:QName?, $child-1-name-2 as xs:QName?, $geo-element-name-2 as xs:QName, $child-2-name-1 as xs:QName?, $child-2-name-2 as xs:QName?</arguments>
        <returnType>element(cts:co-occurrence)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>geospatial-co-occurrences</name>
        <arity>7</arity>
        <arguments>$geo-element-name-1 as xs:QName, $child-1-name-1 as xs:QName?, $child-1-name-2 as xs:QName?, $geo-element-name-2 as xs:QName, $child-2-name-1 as xs:QName?, $child-2-name-2 as xs:QName?, $options as xs:string*</arguments>
        <returnType>element(cts:co-occurrence)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>geospatial-co-occurrences</name>
        <arity>8</arity>
        <arguments>$geo-element-name-1 as xs:QName, $child-1-name-1 as xs:QName?, $child-1-name-2 as xs:QName?, $geo-element-name-2 as xs:QName, $child-2-name-1 as xs:QName?, $child-2-name-2 as xs:QName?, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>element(cts:co-occurrence)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>geospatial-co-occurrences</name>
        <arity>9</arity>
        <arguments>$geo-element-name-1 as xs:QName, $child-1-name-1 as xs:QName?, $child-1-name-2 as xs:QName?, $geo-element-name-2 as xs:QName, $child-2-name-1 as xs:QName?, $child-2-name-2 as xs:QName?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?</arguments>
        <returnType>element(cts:co-occurrence)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>geospatial-element-child-reference</name>
        <arity>3</arity>
        <arguments>$element as xs:string, $child as xs:string, $options as xs:string</arguments>
        <returnType>cts:reference</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>geospatial-element-pair-reference</name>
        <arity>4</arity>
        <arguments>$element as xs:string, $lat as xs:string, $long as xs:string, $options as xs:string</arguments>
        <returnType>cts:reference</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>geospatial-element-reference</name>
        <arity>2</arity>
        <arguments>$element as xs:string, $options as xs:string</arguments>
        <returnType>cts:reference</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>geospatial-path-reference</name>
        <arity>2</arity>
        <arguments>$path-expression as xs:string, $options as xs:string</arguments>
        <returnType>cts:reference</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>highlight</name>
        <arity>3</arity>
        <arguments>$node as node(), $query as cts:query, $expr as item()*</arguments>
        <returnType>node()</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>linear-model</name>
        <arity>1</arity>
        <arguments>$values as cts:reference*</arguments>
        <returnType>math:linear-model?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>linear-model</name>
        <arity>2</arity>
        <arguments>$values as cts:reference*, $options as xs:string*</arguments>
        <returnType>math:linear-model?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>linear-model</name>
        <arity>3</arity>
        <arguments>$values as cts:reference*, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>math:linear-model?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>linear-model</name>
        <arity>4</arity>
        <arguments>$values as cts:reference*, $options as xs:string*, $query as cts:query?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>math:linear-model?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>linestring</name>
        <arity>1</arity>
        <arguments>$vertices as cts:point*</arguments>
        <returnType>cts:linestring</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>linestring-vertices</name>
        <arity>1</arity>
        <arguments>$linestring as cts:linestring</arguments>
        <returnType>cts:point*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>locks-query</name>
        <arity>1</arity>
        <arguments>$query as cts:query</arguments>
        <returnType>cts:locks-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>locks-query-query</name>
        <arity>1</arity>
        <arguments>$query as cts:locks-query</arguments>
        <returnType>cts:query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>max</name>
        <arity>1</arity>
        <arguments>$range-index as cts:reference</arguments>
        <returnType>xs:anyAtomicType?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>max</name>
        <arity>2</arity>
        <arguments>$range-index as cts:reference, $options as xs:string*</arguments>
        <returnType>xs:anyAtomicType?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>max</name>
        <arity>3</arity>
        <arguments>$range-index as cts:reference, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>xs:anyAtomicType?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>max</name>
        <arity>4</arity>
        <arguments>$range-index as cts:reference, $options as xs:string*, $query as cts:query?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>xs:anyAtomicType?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>median</name>
        <arity>1</arity>
        <arguments>$arg as xs:double*</arguments>
        <returnType>xs:double?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>min</name>
        <arity>1</arity>
        <arguments>$range-index as cts:reference</arguments>
        <returnType>xs:anyAtomicType?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>min</name>
        <arity>2</arity>
        <arguments>$range-index as cts:reference, $options as xs:string*</arguments>
        <returnType>xs:anyAtomicType?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>min</name>
        <arity>3</arity>
        <arguments>$range-index as cts:reference, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>xs:anyAtomicType?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>min</name>
        <arity>4</arity>
        <arguments>$range-index as cts:reference, $options as xs:string*, $query as cts:query?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>xs:anyAtomicType?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>near-query</name>
        <arity>1</arity>
        <arguments>$queries as cts:query*</arguments>
        <returnType>cts:near-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>near-query</name>
        <arity>2</arity>
        <arguments>$queries as cts:query*, $distance as xs:double?</arguments>
        <returnType>cts:near-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>near-query</name>
        <arity>3</arity>
        <arguments>$queries as cts:query*, $distance as xs:double?, $options as xs:string*</arguments>
        <returnType>cts:near-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>near-query</name>
        <arity>4</arity>
        <arguments>$queries as cts:query*, $distance as xs:double?, $options as xs:string*, $distance-weight as xs:double?</arguments>
        <returnType>cts:near-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>near-query-distance</name>
        <arity>1</arity>
        <arguments>$query as cts:near-query</arguments>
        <returnType>xs:integer</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>near-query-options</name>
        <arity>1</arity>
        <arguments>$query as cts:near-query</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>near-query-queries</name>
        <arity>1</arity>
        <arguments>$query as cts:near-query</arguments>
        <returnType>cts:query*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>near-query-weight</name>
        <arity>1</arity>
        <arguments>$query as cts:near-query</arguments>
        <returnType>xs:double</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>not-in-query</name>
        <arity>2</arity>
        <arguments>$positive-query as cts:query, $negative-query as cts:query</arguments>
        <returnType>cts:not-in-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>not-in-query-negative-query</name>
        <arity>1</arity>
        <arguments>$query as cts:not-in-query</arguments>
        <returnType>cts:query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>not-in-query-positive-query</name>
        <arity>1</arity>
        <arguments>$query as cts:not-in-query</arguments>
        <returnType>cts:query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>not-query</name>
        <arity>1</arity>
        <arguments>$query as cts:query</arguments>
        <returnType>cts:not-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>not-query-query</name>
        <arity>1</arity>
        <arguments>$query as cts:not-query</arguments>
        <returnType>cts:query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>not-query-weight</name>
        <arity>1</arity>
        <arguments>$query as cts:element-query</arguments>
        <returnType>xs:double</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>or-query</name>
        <arity>1</arity>
        <arguments>$queries as cts:query*</arguments>
        <returnType>cts:or-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>or-query-queries</name>
        <arity>1</arity>
        <arguments>$query as cts:or-query</arguments>
        <returnType>cts:query*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>parse-wkt</name>
        <arity>1</arity>
        <arguments>$wtk as xs:string*</arguments>
        <returnType>cts:region*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>path-geospatial-query</name>
        <arity>2</arity>
        <arguments>$path-expression as xs:string*, $regions as cts:region*</arguments>
        <returnType>cts:path-geospatial-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>path-geospatial-query</name>
        <arity>3</arity>
        <arguments>$path-expression as xs:string*, $regions as cts:region*, $options as xs:string*</arguments>
        <returnType>cts:path-geospatial-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>path-geospatial-query</name>
        <arity>4</arity>
        <arguments>$path-expression as xs:string*, $regions as cts:region*, $options as xs:string*, $weight as xs:double?</arguments>
        <returnType>cts:path-geospatial-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>path-geospatial-query-options</name>
        <arity>1</arity>
        <arguments>$query as cts:path-geospatial-query</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>path-geospatial-query-path-expression</name>
        <arity>1</arity>
        <arguments>$query as cts:path-geospatial-query</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>path-geospatial-query-region</name>
        <arity>1</arity>
        <arguments>$query as cts:path-geospatial-query</arguments>
        <returnType>cts:region*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>path-geospatial-query-weight</name>
        <arity>1</arity>
        <arguments>$query as cts:path-geospatial-query</arguments>
        <returnType>xs:double</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>path-range-query</name>
        <arity>3</arity>
        <arguments>$path-expression as xs:string*, $operator as xs:string, $value as xs:anyAtomicType*</arguments>
        <returnType>cts:path-range-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>path-range-query</name>
        <arity>4</arity>
        <arguments>$path-expression as xs:string*, $operator as xs:string, $value as xs:anyAtomicType*, $options as xs:string*</arguments>
        <returnType>cts:path-range-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>path-range-query</name>
        <arity>5</arity>
        <arguments>$path-expression as xs:string*, $operator as xs:string, $value as xs:anyAtomicType*, $options as xs:string*, $weight as xs:double?</arguments>
        <returnType>cts:path-range-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>path-range-query-operator</name>
        <arity>1</arity>
        <arguments>$query as cts:path-range-query</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>path-range-query-options</name>
        <arity>1</arity>
        <arguments>$query as cts:path-range-query</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>path-range-query-path-name</name>
        <arity>1</arity>
        <arguments>$query as cts:path-range-query</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>path-range-query-value</name>
        <arity>1</arity>
        <arguments>$query as cts:path-range-query</arguments>
        <returnType>xs:anyAtomicType*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>path-range-query-weight</name>
        <arity>1</arity>
        <arguments>$query as cts:path-range-query</arguments>
        <returnType>xs:double</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>path-reference</name>
        <arity>1</arity>
        <arguments>$path-expression as xs:string</arguments>
        <returnType>cts:reference</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>path-reference</name>
        <arity>2</arity>
        <arguments>$path-expression as xs:string, $options as xs:string</arguments>
        <returnType>cts:reference</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>percent-rank</name>
        <arity>2</arity>
        <arguments>$arg as xs:anyAtomicType*, $value as xs:anyAtomicType</arguments>
        <returnType>xs:double?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>percent-rank</name>
        <arity>3</arity>
        <arguments>$arg as xs:anyAtomicType*, $value as xs:anyAtomicType, $options as xs:string*</arguments>
        <returnType>xs:double?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>percentile</name>
        <arity>2</arity>
        <arguments>$arg as xs:double*, $p as xs:double*</arguments>
        <returnType>xs:double*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>point</name>
        <arity>2</arity>
        <arguments>$latitude as xs:float, $longitude as xs:float</arguments>
        <returnType>cts:point</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>point-latitude</name>
        <arity>1</arity>
        <arguments>$point as cts:point</arguments>
        <returnType>xs:float</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>point-longitude</name>
        <arity>1</arity>
        <arguments>$point as cts:point</arguments>
        <returnType>xs:float</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>polygon</name>
        <arity>1</arity>
        <arguments>$vertices as cts:point*</arguments>
        <returnType>cts:polygon</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>polygon-contains</name>
        <arity>2</arity>
        <arguments>$polygon as cts:polygon, $region as cts:region*</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>polygon-contains</name>
        <arity>3</arity>
        <arguments>$polygon as cts:polygon, $region as cts:region*, $options as xs:string*</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>polygon-intersects</name>
        <arity>2</arity>
        <arguments>$polygon as cts:polygon, $region as cts:region*</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>polygon-intersects</name>
        <arity>3</arity>
        <arguments>$polygon as cts:polygon, $region as cts:region*, $options as xs:string*</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>polygon-vertices</name>
        <arity>1</arity>
        <arguments>$polygon as cts:polygon</arguments>
        <returnType>cts:point*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>properties-query</name>
        <arity>1</arity>
        <arguments>$query as cts:query</arguments>
        <returnType>cts:properties-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>properties-query-query</name>
        <arity>1</arity>
        <arguments>$query as cts:properties-query</arguments>
        <returnType>cts:query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>quality</name>
        <arity>0</arity>
        <arguments/>
        <returnType>xs:integer</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>quality</name>
        <arity>1</arity>
        <arguments>$node as node()</arguments>
        <returnType>xs:integer</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>query</name>
        <arity>0</arity>
        <arguments/>
        <returnType>cts:query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>query</name>
        <arity>1</arity>
        <arguments>$query as element()</arguments>
        <returnType>cts:query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>rank</name>
        <arity>2</arity>
        <arguments>$arg as xs:anyAtomicType*, $value as xs:anyAtomicType</arguments>
        <returnType>xs:integer?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>rank</name>
        <arity>3</arity>
        <arguments>$arg as xs:anyAtomicType*, $value as xs:anyAtomicType, $options as xs:string*</arguments>
        <returnType>xs:integer?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>reference-parse</name>
        <arity>0</arity>
        <arguments/>
        <returnType>cts:reference</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>reference-parse</name>
        <arity>1</arity>
        <arguments>$reference as element()</arguments>
        <returnType>cts:reference</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>register</name>
        <arity>1</arity>
        <arguments>$query as cts:query</arguments>
        <returnType>xs:unsignedLong</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>registered-query</name>
        <arity>1</arity>
        <arguments>$ids as xs:unsignedLong*</arguments>
        <returnType>cts:registered-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>registered-query</name>
        <arity>2</arity>
        <arguments>$ids as xs:unsignedLong*, $options as xs:string*</arguments>
        <returnType>cts:registered-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>registered-query</name>
        <arity>3</arity>
        <arguments>$ids as xs:unsignedLong*, $options as xs:string*, $weight as xs:double?</arguments>
        <returnType>cts:registered-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>registered-query-ids</name>
        <arity>1</arity>
        <arguments>$query as cts:registered-query</arguments>
        <returnType>xs:unsignedLong*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>registered-query-options</name>
        <arity>1</arity>
        <arguments>$query as cts:registered-query</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>registered-query-weight</name>
        <arity>1</arity>
        <arguments>$query as cts:registered-query</arguments>
        <returnType>xs:double</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>relevance-info</name>
        <arity>0</arity>
        <arguments/>
        <returnType>element()?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>relevance-info</name>
        <arity>1</arity>
        <arguments>$node as node()</arguments>
        <returnType>element()?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>remainder</name>
        <arity>0</arity>
        <arguments/>
        <returnType>xs:integer</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>remainder</name>
        <arity>1</arity>
        <arguments>$node as node()</arguments>
        <returnType>xs:integer</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>reverse-query</name>
        <arity>1</arity>
        <arguments>$nodes as node()*</arguments>
        <returnType>cts:reverse-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>reverse-query</name>
        <arity>2</arity>
        <arguments>$nodes as node()*, $weight as xs:double?</arguments>
        <returnType>cts:reverse-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>reverse-query-nodes</name>
        <arity>1</arity>
        <arguments>$query as cts:reverse-query</arguments>
        <returnType>node()*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>reverse-query-weight</name>
        <arity>1</arity>
        <arguments>$query as cts:reverse-query</arguments>
        <returnType>xs:double</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>score</name>
        <arity>0</arity>
        <arguments/>
        <returnType>xs:integer</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>score</name>
        <arity>1</arity>
        <arguments>$node as node()</arguments>
        <returnType>xs:integer</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>search</name>
        <arity>2</arity>
        <arguments>$expression as node()*, $query as cts:query?</arguments>
        <returnType>node()*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>search</name>
        <arity>3</arity>
        <arguments>$expression as node()*, $query as cts:query?, $options as xs:string*</arguments>
        <returnType>node()*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>search</name>
        <arity>4</arity>
        <arguments>$expression as node()*, $query as cts:query?, $options as xs:string*, $quality-weight as xs:double?</arguments>
        <returnType>node()*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>search</name>
        <arity>5</arity>
        <arguments>$expression as node()*, $query as cts:query?, $options as xs:string*, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>node()*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>shortest-distance</name>
        <arity>2</arity>
        <arguments>$p1 as cts:point, $region as cts:region+</arguments>
        <returnType>xs:double</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>shortest-distance</name>
        <arity>3</arity>
        <arguments>$p1 as cts:point, $region as cts:region+, $options as xs:string*</arguments>
        <returnType>xs:double</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>similar-query</name>
        <arity>1</arity>
        <arguments>$nodes as node()*</arguments>
        <returnType>cts:similar-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>similar-query</name>
        <arity>2</arity>
        <arguments>$nodes as node()*, $weight as xs:double?</arguments>
        <returnType>cts:similar-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>similar-query</name>
        <arity>3</arity>
        <arguments>$nodes as node()*, $weight as xs:double?, $options as element()?</arguments>
        <returnType>cts:similar-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>similar-query-nodes</name>
        <arity>1</arity>
        <arguments>$query as cts:similar-query</arguments>
        <returnType>node()*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>similar-query-weight</name>
        <arity>1</arity>
        <arguments>$query as cts:similar-query</arguments>
        <returnType>xs:double</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>stddev</name>
        <arity>1</arity>
        <arguments>$range-index as cts:reference</arguments>
        <returnType>xs:double?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>stddev</name>
        <arity>2</arity>
        <arguments>$range-index as cts:reference, $options as xs:string*</arguments>
        <returnType>xs:double?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>stddev</name>
        <arity>3</arity>
        <arguments>$range-index as cts:reference, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>xs:double?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>stddev</name>
        <arity>4</arity>
        <arguments>$range-index as cts:reference, $options as xs:string*, $query as cts:query?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>xs:double?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>stddev-p</name>
        <arity>1</arity>
        <arguments>$range-index as cts:reference</arguments>
        <returnType>xs:double?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>stddev-p</name>
        <arity>2</arity>
        <arguments>$range-index as cts:reference, $options as xs:string*</arguments>
        <returnType>xs:double?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>stddev-p</name>
        <arity>3</arity>
        <arguments>$range-index as cts:reference, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>xs:double?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>stddev-p</name>
        <arity>4</arity>
        <arguments>$range-index as cts:reference, $options as xs:string*, $query as cts:query?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>xs:double?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>stem</name>
        <arity>1</arity>
        <arguments>$text as xs:string</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>stem</name>
        <arity>2</arity>
        <arguments>$text as xs:string, $language as xs:string?</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>sum</name>
        <arity>1</arity>
        <arguments>$arg as xs:anyAtomicType*</arguments>
        <returnType>xs:anyAtomicType?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>sum</name>
        <arity>2</arity>
        <arguments>$arg as xs:anyAtomicType*, $zero as xs:anyAtomicType?</arguments>
        <returnType>xs:anyAtomicType?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>sum-aggregate</name>
        <arity>1</arity>
        <arguments>$range-index as cts:reference</arguments>
        <returnType>xs:anyAtomicType?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>sum-aggregate</name>
        <arity>2</arity>
        <arguments>$range-index as cts:reference, $options as xs:string*</arguments>
        <returnType>xs:anyAtomicType?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>sum-aggregate</name>
        <arity>3</arity>
        <arguments>$range-index as cts:reference, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>xs:anyAtomicType?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>sum-aggregate</name>
        <arity>4</arity>
        <arguments>$range-index as cts:reference, $options as xs:string*, $query as cts:query?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>xs:anyAtomicType?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>thresholds</name>
        <arity>2</arity>
        <arguments>$computed-labels as element(cts:label)*, $known-labels as element(cts:label)*</arguments>
        <returnType>element(cts:thresholds)?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>thresholds</name>
        <arity>3</arity>
        <arguments>$computed-labels as element(cts:label)*, $known-labels as element(cts:label)*, $recall-weight as xs:double?</arguments>
        <returnType>element(cts:thresholds)?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>to-wkt</name>
        <arity>1</arity>
        <arguments>$wtk as cts:region*</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>tokenize</name>
        <arity>1</arity>
        <arguments>$text as xs:string</arguments>
        <returnType>cts:token*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>tokenize</name>
        <arity>2</arity>
        <arguments>$text as xs:string, $language as xs:string?</arguments>
        <returnType>cts:token*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>tokenize</name>
        <arity>3</arity>
        <arguments>$text as xs:string, $language as xs:string?, $field as xs:string?</arguments>
        <returnType>cts:token*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>train</name>
        <arity>2</arity>
        <arguments>$training-nodes as node()*, $labels as element(cts:label)*</arguments>
        <returnType>element(cts:classifier)?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>train</name>
        <arity>3</arity>
        <arguments>$training-nodes as node()*, $labels as element(cts:label)*, $options as element()?</arguments>
        <returnType>element(cts:classifier)?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>triple-range-query</name>
        <arity>3</arity>
        <arguments>$subject as xs:anyAtomicType*, $predicate as xs:anyAtomicType*, $object as xs:anyAtomicType*</arguments>
        <returnType>cts:triple-range-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>triple-range-query</name>
        <arity>4</arity>
        <arguments>$subject as xs:anyAtomicType*, $predicate as xs:anyAtomicType*, $object as xs:anyAtomicType*, $operator as xs:string*</arguments>
        <returnType>cts:triple-range-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>triple-range-query</name>
        <arity>5</arity>
        <arguments>$subject as xs:anyAtomicType*, $predicate as xs:anyAtomicType*, $object as xs:anyAtomicType*, $operator as xs:string*, $options as xs:string*</arguments>
        <returnType>cts:triple-range-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>triple-range-query</name>
        <arity>6</arity>
        <arguments>$subject as xs:anyAtomicType*, $predicate as xs:anyAtomicType*, $object as xs:anyAtomicType*, $operator as xs:string*, $options as xs:string*, $weight as xs:double?</arguments>
        <returnType>cts:triple-range-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>triple-range-query-object</name>
        <arity>1</arity>
        <arguments>$query as cts:triple-range-query</arguments>
        <returnType>xs:anyAtomicType*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>triple-range-query-operator</name>
        <arity>1</arity>
        <arguments>$query as cts:triple-range-query</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>triple-range-query-options</name>
        <arity>1</arity>
        <arguments>$query as cts:triple-range-query</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>triple-range-query-predicate</name>
        <arity>1</arity>
        <arguments>$query as cts:triple-range-query</arguments>
        <returnType>xs:anyAtomicType*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>triple-range-query-subject</name>
        <arity>1</arity>
        <arguments>$query as cts:triple-range-query</arguments>
        <returnType>xs:anyAtomicType*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>triple-range-query-weight</name>
        <arity>1</arity>
        <arguments>$query as cts:triple-range-query</arguments>
        <returnType>xs:double</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>triples</name>
        <arity>0</arity>
        <arguments/>
        <returnType>sem:triple*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>triples</name>
        <arity>1</arity>
        <arguments>$subject as xs:anyAtomicType*</arguments>
        <returnType>sem:triple*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>triples</name>
        <arity>2</arity>
        <arguments>$subject as xs:anyAtomicType*, $predicate as xs:anyAtomicType*</arguments>
        <returnType>sem:triple*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>triples</name>
        <arity>3</arity>
        <arguments>$subject as xs:anyAtomicType*, $predicate as xs:anyAtomicType*, $object as xs:anyAtomicType*</arguments>
        <returnType>sem:triple*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>triples</name>
        <arity>4</arity>
        <arguments>$subject as xs:anyAtomicType*, $predicate as xs:anyAtomicType*, $object as xs:anyAtomicType*, $operator as xs:string*</arguments>
        <returnType>sem:triple*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>triples</name>
        <arity>5</arity>
        <arguments>$subject as xs:anyAtomicType*, $predicate as xs:anyAtomicType*, $object as xs:anyAtomicType*, $operator as xs:string*, $options as xs:string*</arguments>
        <returnType>sem:triple*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>triples</name>
        <arity>6</arity>
        <arguments>$subject as xs:anyAtomicType*, $predicate as xs:anyAtomicType*, $object as xs:anyAtomicType*, $operator as xs:string*, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>sem:triple*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>triples</name>
        <arity>7</arity>
        <arguments>$subject as xs:anyAtomicType*, $predicate as xs:anyAtomicType*, $object as xs:anyAtomicType*, $operator as xs:string*, $options as xs:string*, $query as cts:query?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>sem:triple*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>uri-match</name>
        <arity>1</arity>
        <arguments>$pattern as xs:string</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>uri-match</name>
        <arity>2</arity>
        <arguments>$pattern as xs:string, $options as xs:string*</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>uri-match</name>
        <arity>3</arity>
        <arguments>$pattern as xs:string, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>uri-match</name>
        <arity>4</arity>
        <arguments>$pattern as xs:string, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>uri-match</name>
        <arity>5</arity>
        <arguments>$pattern as xs:string, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>uris</name>
        <arity>0</arity>
        <arguments/>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>uris</name>
        <arity>1</arity>
        <arguments>$start as xs:string?</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>uris</name>
        <arity>2</arity>
        <arguments>$start as xs:string?, $options as xs:string*</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>uris</name>
        <arity>3</arity>
        <arguments>$start as xs:string?, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>uris</name>
        <arity>4</arity>
        <arguments>$start as xs:string?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>uris</name>
        <arity>5</arity>
        <arguments>$start as xs:string?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>valid-index-path</name>
        <arity>2</arity>
        <arguments>$string as xs:string, $ignorens as xs:boolean</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>value-co-occurrences</name>
        <arity>2</arity>
        <arguments>$range-index-1 as cts:reference, $range-index-2 as cts:reference</arguments>
        <returnType>element(cts:co-occurrence)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>value-co-occurrences</name>
        <arity>3</arity>
        <arguments>$range-index-1 as cts:reference, $range-index-2 as cts:reference, $options as xs:string*</arguments>
        <returnType>element(cts:co-occurrence)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>value-co-occurrences</name>
        <arity>4</arity>
        <arguments>$range-index-1 as cts:reference, $range-index-2 as cts:reference, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>element(cts:co-occurrence)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>value-co-occurrences</name>
        <arity>5</arity>
        <arguments>$range-index-1 as cts:reference, $range-index-2 as cts:reference, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?</arguments>
        <returnType>element(cts:co-occurrence)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>value-co-occurrences</name>
        <arity>6</arity>
        <arguments>$range-index-1 as cts:reference, $range-index-2 as cts:reference, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>element(cts:co-occurrence)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>value-match</name>
        <arity>2</arity>
        <arguments>$range-indexes as cts:reference*, $pattern as xs:anyAtomicType</arguments>
        <returnType>xs:anyAtomicType*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>value-match</name>
        <arity>3</arity>
        <arguments>$range-indexes as cts:reference*, $pattern as xs:anyAtomicType, $options as xs:string*</arguments>
        <returnType>xs:anyAtomicType*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>value-match</name>
        <arity>4</arity>
        <arguments>$range-indexes as cts:reference*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>xs:anyAtomicType*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>value-match</name>
        <arity>5</arity>
        <arguments>$range-indexes as cts:reference*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?</arguments>
        <returnType>xs:anyAtomicType*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>value-match</name>
        <arity>6</arity>
        <arguments>$range-indexes as cts:reference*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>xs:anyAtomicType*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>value-ranges</name>
        <arity>1</arity>
        <arguments>$range-indexes as cts:reference*</arguments>
        <returnType>element(cts:range)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>value-ranges</name>
        <arity>2</arity>
        <arguments>$range-indexes as cts:reference*, $bounds as xs:anyAtomicType*</arguments>
        <returnType>element(cts:range)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>value-ranges</name>
        <arity>3</arity>
        <arguments>$range-indexes as cts:reference*, $bounds as xs:anyAtomicType*, $options as xs:string*</arguments>
        <returnType>element(cts:range)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>value-ranges</name>
        <arity>4</arity>
        <arguments>$range-indexes as cts:reference*, $bounds as xs:anyAtomicType*, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>element(cts:range)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>value-ranges</name>
        <arity>5</arity>
        <arguments>$range-indexes as cts:reference*, $bounds as xs:anyAtomicType*, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?</arguments>
        <returnType>element(cts:range)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>value-ranges</name>
        <arity>6</arity>
        <arguments>$range-indexes as cts:reference*, $bounds as xs:anyAtomicType*, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>element(cts:range)*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>value-tuples</name>
        <arity>1</arity>
        <arguments>$range-indexes as cts:reference*</arguments>
        <returnType>json:array*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>value-tuples</name>
        <arity>2</arity>
        <arguments>$range-indexes as cts:reference*, $options as xs:string*</arguments>
        <returnType>json:array*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>value-tuples</name>
        <arity>3</arity>
        <arguments>$range-indexes as cts:reference*, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>json:array*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>value-tuples</name>
        <arity>4</arity>
        <arguments>$range-indexes as cts:reference*, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?</arguments>
        <returnType>json:array*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>value-tuples</name>
        <arity>5</arity>
        <arguments>$range-indexes as cts:reference*, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>json:array*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>values</name>
        <arity>1</arity>
        <arguments>$range-indexes as cts:reference*</arguments>
        <returnType>xs:anyAtomicType*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>values</name>
        <arity>2</arity>
        <arguments>$range-indexes as cts:reference*, $start as xs:anyAtomicType?</arguments>
        <returnType>xs:anyAtomicType*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>values</name>
        <arity>3</arity>
        <arguments>$range-indexes as cts:reference*, $start as xs:anyAtomicType?, $options as xs:string*</arguments>
        <returnType>xs:anyAtomicType*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>values</name>
        <arity>4</arity>
        <arguments>$range-indexes as cts:reference*, $start as xs:anyAtomicType?, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>xs:anyAtomicType*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>values</name>
        <arity>5</arity>
        <arguments>$range-indexes as cts:reference*, $start as xs:anyAtomicType?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?</arguments>
        <returnType>xs:anyAtomicType*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>values</name>
        <arity>6</arity>
        <arguments>$range-indexes as cts:reference*, $start as xs:anyAtomicType?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>xs:anyAtomicType*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>variance</name>
        <arity>1</arity>
        <arguments>$range-index as cts:reference</arguments>
        <returnType>xs:double?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>variance</name>
        <arity>2</arity>
        <arguments>$range-index as cts:reference, $options as xs:string*</arguments>
        <returnType>xs:double?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>variance</name>
        <arity>3</arity>
        <arguments>$range-index as cts:reference, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>xs:double?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>variance</name>
        <arity>4</arity>
        <arguments>$range-index as cts:reference, $options as xs:string*, $query as cts:query?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>xs:double?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>variance-p</name>
        <arity>1</arity>
        <arguments>$range-index as cts:reference</arguments>
        <returnType>xs:double?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>variance-p</name>
        <arity>2</arity>
        <arguments>$range-index as cts:reference, $options as xs:string*</arguments>
        <returnType>xs:double?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>variance-p</name>
        <arity>3</arity>
        <arguments>$range-index as cts:reference, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>xs:double?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>variance-p</name>
        <arity>4</arity>
        <arguments>$range-index as cts:reference, $options as xs:string*, $query as cts:query?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>xs:double?</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>walk</name>
        <arity>3</arity>
        <arguments>$node as node(), $query as cts:query, $expr as item()*</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>word-match</name>
        <arity>1</arity>
        <arguments>$pattern as xs:string</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>word-match</name>
        <arity>2</arity>
        <arguments>$pattern as xs:string, $options as xs:string*</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>word-match</name>
        <arity>3</arity>
        <arguments>$pattern as xs:string, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>word-match</name>
        <arity>4</arity>
        <arguments>$pattern as xs:string, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>word-match</name>
        <arity>5</arity>
        <arguments>$pattern as xs:string, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>word-query</name>
        <arity>1</arity>
        <arguments>$text as xs:string*</arguments>
        <returnType>cts:word-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>word-query</name>
        <arity>2</arity>
        <arguments>$text as xs:string*, $options as xs:string*</arguments>
        <returnType>cts:word-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>word-query</name>
        <arity>3</arity>
        <arguments>$text as xs:string*, $options as xs:string*, $weight as xs:double?</arguments>
        <returnType>cts:word-query</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>word-query-options</name>
        <arity>1</arity>
        <arguments>$query as cts:word-query</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>word-query-text</name>
        <arity>1</arity>
        <arguments>$query as cts:word-query</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>word-query-weight</name>
        <arity>1</arity>
        <arguments>$query as cts:word-query</arguments>
        <returnType>xs:double</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>words</name>
        <arity>0</arity>
        <arguments/>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>words</name>
        <arity>1</arity>
        <arguments>$start as xs:string?</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>words</name>
        <arity>2</arity>
        <arguments>$start as xs:string?, $options as xs:string*</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>words</name>
        <arity>3</arity>
        <arguments>$start as xs:string?, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>words</name>
        <arity>4</arity>
        <arguments>$start as xs:string?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>cts</prefix>
        <name>words</name>
        <arity>5</arity>
        <arguments>$start as xs:string?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>dbg</prefix>
        <name>attach</name>
        <arity>1</arity>
        <arguments>$request-id as xs:unsignedLong</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>dbg</prefix>
        <name>attached</name>
        <arity>0</arity>
        <arguments/>
        <returnType>xs:unsignedLong*</returnType>
    </function>
    <function>
        <prefix>dbg</prefix>
        <name>attached</name>
        <arity>1</arity>
        <arguments>$server as xs:unsignedLong</arguments>
        <returnType>xs:unsignedLong*</returnType>
    </function>
    <function>
        <prefix>dbg</prefix>
        <name>break</name>
        <arity>1</arity>
        <arguments>$request as xs:unsignedLong</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>dbg</prefix>
        <name>break</name>
        <arity>2</arity>
        <arguments>$request as xs:unsignedLong, $expression as xs:unsignedLong</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>dbg</prefix>
        <name>breakpoints</name>
        <arity>1</arity>
        <arguments>$request as xs:unsignedLong</arguments>
        <returnType>xs:unsignedLong*</returnType>
    </function>
    <function>
        <prefix>dbg</prefix>
        <name>clear</name>
        <arity>2</arity>
        <arguments>$request as xs:unsignedLong, $expression as xs:unsignedLong</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>dbg</prefix>
        <name>connect</name>
        <arity>1</arity>
        <arguments>$server as xs:unsignedLong</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>dbg</prefix>
        <name>continue</name>
        <arity>1</arity>
        <arguments>$request as xs:unsignedLong</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>dbg</prefix>
        <name>detach</name>
        <arity>1</arity>
        <arguments>$request-id as xs:unsignedLong</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>dbg</prefix>
        <name>disconnect</name>
        <arity>1</arity>
        <arguments>$server as xs:unsignedLong</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>dbg</prefix>
        <name>eval</name>
        <arity>1</arity>
        <arguments>$xquery as xs:string</arguments>
        <returnType>xs:unsignedLong</returnType>
    </function>
    <function>
        <prefix>dbg</prefix>
        <name>eval</name>
        <arity>2</arity>
        <arguments>$xquery as xs:string, $vars as item()*</arguments>
        <returnType>xs:unsignedLong</returnType>
    </function>
    <function>
        <prefix>dbg</prefix>
        <name>eval</name>
        <arity>3</arity>
        <arguments>$xquery as xs:string, $vars as item()*, $options as node()?</arguments>
        <returnType>xs:unsignedLong</returnType>
    </function>
    <function>
        <prefix>dbg</prefix>
        <name>expr</name>
        <arity>2</arity>
        <arguments>$request as xs:unsignedLong, $expression as xs:unsignedLong</arguments>
        <returnType>element(dbg:expression)</returnType>
    </function>
    <function>
        <prefix>dbg</prefix>
        <name>finish</name>
        <arity>1</arity>
        <arguments>$request as xs:unsignedLong</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>dbg</prefix>
        <name>function</name>
        <arity>3</arity>
        <arguments>$request as xs:unsignedLong, $uri as xs:string, $function as xs:QName</arguments>
        <returnType>xs:unsignedLong</returnType>
    </function>
    <function>
        <prefix>dbg</prefix>
        <name>invoke</name>
        <arity>1</arity>
        <arguments>$uri as xs:string</arguments>
        <returnType>xs:unsignedLong</returnType>
    </function>
    <function>
        <prefix>dbg</prefix>
        <name>invoke</name>
        <arity>2</arity>
        <arguments>$uri as xs:string, $vars as item()*</arguments>
        <returnType>xs:unsignedLong</returnType>
    </function>
    <function>
        <prefix>dbg</prefix>
        <name>invoke</name>
        <arity>3</arity>
        <arguments>$uri as xs:string, $vars as item()*, $options as node()?</arguments>
        <returnType>xs:unsignedLong</returnType>
    </function>
    <function>
        <prefix>dbg</prefix>
        <name>line</name>
        <arity>3</arity>
        <arguments>$request as xs:unsignedLong, $uri as xs:string, $line as xs:unsigned</arguments>
        <returnType>xs:unsignedLong*</returnType>
    </function>
    <function>
        <prefix>dbg</prefix>
        <name>next</name>
        <arity>1</arity>
        <arguments>$request as xs:unsignedLong</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>dbg</prefix>
        <name>out</name>
        <arity>1</arity>
        <arguments>$request as xs:unsignedLong</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>dbg</prefix>
        <name>stack</name>
        <arity>1</arity>
        <arguments>$request as xs:unsignedLong</arguments>
        <returnType>element(dbg:stack)</returnType>
    </function>
    <function>
        <prefix>dbg</prefix>
        <name>status</name>
        <arity>1</arity>
        <arguments>$request-id as xs:unsignedLong*</arguments>
        <returnType>element(dbg:requests)?</returnType>
    </function>
    <function>
        <prefix>dbg</prefix>
        <name>step</name>
        <arity>1</arity>
        <arguments>$request as xs:unsignedLong</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>dbg</prefix>
        <name>stopped</name>
        <arity>0</arity>
        <arguments/>
        <returnType>xs:unsignedLong*</returnType>
    </function>
    <function>
        <prefix>dbg</prefix>
        <name>stopped</name>
        <arity>1</arity>
        <arguments>$server as xs:unsignedLong</arguments>
        <returnType>xs:unsignedLong*</returnType>
    </function>
    <function>
        <prefix>dbg</prefix>
        <name>value</name>
        <arity>1</arity>
        <arguments>$request as xs:unsignedLong</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>dbg</prefix>
        <name>value</name>
        <arity>2</arity>
        <arguments>$request as xs:unsignedLong, $expr as xs:string</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>dbg</prefix>
        <name>wait</name>
        <arity>2</arity>
        <arguments>$request-id as xs:unsignedLong*, $timeout as xs:unsignedLong</arguments>
        <returnType>xs:unsignedLong?</returnType>
    </function>
    <function>
        <prefix>exsl</prefix>
        <name>node-set</name>
        <arity>1</arity>
        <arguments>$value as xs:anyAtomicType*</arguments>
        <returnType>node()*</returnType>
    </function>
    <function>
        <prefix>exsl</prefix>
        <name>object-type</name>
        <arity>1</arity>
        <arguments>$value as atomic type</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>QName</name>
        <arity>2</arity>
        <arguments>$paramURI as xs:string?, $paramQName as xs:string</arguments>
        <returnType>xs:QName</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>abs</name>
        <arity>1</arity>
        <arguments>$arg as numeric?</arguments>
        <returnType>numeric?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>adjust-date-to-timezone</name>
        <arity>1</arity>
        <arguments>$arg as xs:date?</arguments>
        <returnType>xs:date?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>adjust-date-to-timezone</name>
        <arity>2</arity>
        <arguments>$arg as xs:date?, $timezone as xs:dayTimeDuration?</arguments>
        <returnType>xs:date?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>adjust-dateTime-to-timezone</name>
        <arity>1</arity>
        <arguments>$arg as xs:dateTime?</arguments>
        <returnType>xs:dateTime?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>adjust-dateTime-to-timezone</name>
        <arity>2</arity>
        <arguments>$arg as xs:dateTime?, $timezone as xs:dayTimeDuration?</arguments>
        <returnType>xs:dateTime?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>adjust-time-to-timezone</name>
        <arity>1</arity>
        <arguments>$arg as xs:date?</arguments>
        <returnType>xs:integer?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>adjust-time-to-timezone</name>
        <arity>2</arity>
        <arguments>$arg as xs:date?, $timezone as xs:dayTimeDuration?</arguments>
        <returnType>xs:integer?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>analyze-string</name>
        <arity>2</arity>
        <arguments>$in as xs:string?, $regex as xs:string</arguments>
        <returnType>element(s:results)</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>analyze-string</name>
        <arity>3</arity>
        <arguments>$in as xs:string?, $regex as xs:string, $flags as xs:string</arguments>
        <returnType>element(s:results)</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>avg</name>
        <arity>1</arity>
        <arguments>$arg as xs:anyAtomicType*</arguments>
        <returnType>xs:anyAtomicType?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>base-uri</name>
        <arity>0</arity>
        <arguments/>
        <returnType>xs:anyURI?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>base-uri</name>
        <arity>1</arity>
        <arguments>$arg as node()?</arguments>
        <returnType>xs:anyURI?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>boolean</name>
        <arity>1</arity>
        <arguments>$arg as item()*</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>ceiling</name>
        <arity>1</arity>
        <arguments>$arg as numeric?</arguments>
        <returnType>numeric?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>codepoint-equal</name>
        <arity>2</arity>
        <arguments>$comparand1 as xs:string?, $comparand2 as xs:string?</arguments>
        <returnType>xs:boolean?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>codepoints-to-string</name>
        <arity>1</arity>
        <arguments>$arg as xs:integer*</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>collection</name>
        <arity>0</arity>
        <arguments/>
        <returnType>document-node()*</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>collection</name>
        <arity>1</arity>
        <arguments>$uri as xs:string*</arguments>
        <returnType>document-node()*</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>compare</name>
        <arity>2</arity>
        <arguments>$comparand1 as xs:string?, $comparand2 as xs:string?</arguments>
        <returnType>xs:integer?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>compare</name>
        <arity>3</arity>
        <arguments>$comparand1 as xs:string?, $comparand2 as xs:string?, $collation as xs:string</arguments>
        <returnType>xs:integer?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>concat</name>
        <arity>1</arity>
        <arguments>$parameter1 as xs:anyAtomicType?</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>concat</name>
        <arity>2</arity>
        <arguments>$parameter1 as xs:anyAtomicType?, $parameterN as xs:anyAtomicType?,...</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>contains</name>
        <arity>2</arity>
        <arguments>$parameter1 as xs:string?, $parameter2 as xs:string?</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>contains</name>
        <arity>3</arity>
        <arguments>$parameter1 as xs:string?, $parameter2 as xs:string?, $collation as xs:string</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>count</name>
        <arity>1</arity>
        <arguments>$arg as item()*</arguments>
        <returnType>xs:integer</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>count</name>
        <arity>2</arity>
        <arguments>$arg as item()*, $maximum as xs:double?</arguments>
        <returnType>xs:integer</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>data</name>
        <arity>1</arity>
        <arguments>$arg as item()*</arguments>
        <returnType>xs:anyAtomicType*</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>day-from-date</name>
        <arity>1</arity>
        <arguments>$arg as xs:dateTime?</arguments>
        <returnType>xs:integer?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>day-from-dateTime</name>
        <arity>1</arity>
        <arguments>$arg as xs:dateTime?</arguments>
        <returnType>xs:integer?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>days-from-duration</name>
        <arity>1</arity>
        <arguments>$arg as xs:duration?</arguments>
        <returnType>xs:integer?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>deep-equal</name>
        <arity>2</arity>
        <arguments>$parameter1 as item()*, $parameter2 as item()*</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>deep-equal</name>
        <arity>3</arity>
        <arguments>$parameter1 as item()*, $parameter2 as item()*, $collation as xs:string</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>distinct-nodes</name>
        <arity>1</arity>
        <arguments>$nodes as node()*</arguments>
        <returnType>node()*</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>distinct-values</name>
        <arity>1</arity>
        <arguments>$arg as xs:anyAtomicType*</arguments>
        <returnType>xs:anyAtomicType*</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>distinct-values</name>
        <arity>2</arity>
        <arguments>$arg as xs:anyAtomicType*, $collation as xs:string</arguments>
        <returnType>xs:anyAtomicType*</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>doc</name>
        <arity>0</arity>
        <arguments/>
        <returnType>document-node()*</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>doc</name>
        <arity>1</arity>
        <arguments>$uri as xs:string*</arguments>
        <returnType>document-node()*</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>doc-available</name>
        <arity>1</arity>
        <arguments>$uri as xs:string?</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>document</name>
        <arity>1</arity>
        <arguments>$uris as item()*</arguments>
        <returnType>document-node()*</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>document</name>
        <arity>2</arity>
        <arguments>$uris as item()*, $base-node as node()</arguments>
        <returnType>document-node()*</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>document-uri</name>
        <arity>1</arity>
        <arguments>$arg as node()?</arguments>
        <returnType>xs:anyURI?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>element-available</name>
        <arity>1</arity>
        <arguments>$element-name as xs:string</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>empty</name>
        <arity>1</arity>
        <arguments>$arg as item()*</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>encode-for-uri</name>
        <arity>1</arity>
        <arguments>$uri-part as xs:string</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>ends-with</name>
        <arity>2</arity>
        <arguments>$parameter1 as xs:string?, $parameter2 as xs:string?</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>ends-with</name>
        <arity>3</arity>
        <arguments>$parameter1 as xs:string?, $parameter2 as xs:string?, $collation as xs:string</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>error</name>
        <arity>0</arity>
        <arguments/>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>error</name>
        <arity>1</arity>
        <arguments>$error as xs:QName?</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>error</name>
        <arity>2</arity>
        <arguments>$error as xs:QName?, $description as xs:string</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>error</name>
        <arity>3</arity>
        <arguments>$error as xs:QName?, $description as xs:string, $data as item()*</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>escape-html-uri</name>
        <arity>1</arity>
        <arguments>$uri-part as xs:string</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>escape-uri</name>
        <arity>2</arity>
        <arguments>$uri-part as xs:string, $escape-reserved as xs:boolean</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>exactly-one</name>
        <arity>1</arity>
        <arguments>$arg as item()*</arguments>
        <returnType>item()</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>exists</name>
        <arity>1</arity>
        <arguments>$arg as item()*</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>expanded-QName</name>
        <arity>2</arity>
        <arguments>$paramURI as xs:string?, $paramLocal as xs:string</arguments>
        <returnType>xs:QName</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>filter</name>
        <arity>2</arity>
        <arguments>$function as function(item()) as xs:boolean, $seq as item()*</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>floor</name>
        <arity>1</arity>
        <arguments>$arg as numeric?</arguments>
        <returnType>numeric?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>fold-left</name>
        <arity>3</arity>
        <arguments>$function as function(item()*, item()) as item()*, $zero as item()*, $seq as item()*</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>fold-right</name>
        <arity>3</arity>
        <arguments>$function as function(item(), item()*) as item()*, $zero as item()*, $seq as item()*</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>format-date</name>
        <arity>2</arity>
        <arguments>$value as xs:date, $picture as xs:string</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>format-date</name>
        <arity>3</arity>
        <arguments>$value as xs:date, $picture as xs:string, $language as xs:string</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>format-date</name>
        <arity>4</arity>
        <arguments>$value as xs:date, $picture as xs:string, $language as xs:string, $calendar as xs:string</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>format-date</name>
        <arity>5</arity>
        <arguments>$value as xs:date, $picture as xs:string, $language as xs:string, $calendar as xs:string, $country as xs:string</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>format-dateTime</name>
        <arity>2</arity>
        <arguments>$value as xs:dateTime, $picture as xs:string</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>format-dateTime</name>
        <arity>3</arity>
        <arguments>$value as xs:dateTime, $picture as xs:string, $language as xs:string</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>format-dateTime</name>
        <arity>4</arity>
        <arguments>$value as xs:dateTime, $picture as xs:string, $language as xs:string, $calendar as xs:string</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>format-dateTime</name>
        <arity>5</arity>
        <arguments>$value as xs:dateTime, $picture as xs:string, $language as xs:string, $calendar as xs:string, $country as xs:string</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>format-number</name>
        <arity>2</arity>
        <arguments>$value as numeric, $picture as xs:string</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>format-number</name>
        <arity>3</arity>
        <arguments>$value as numeric, $picture as xs:string, $decimal-format-name as xs:string</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>format-time</name>
        <arity>2</arity>
        <arguments>$value as time, $picture as xs:string</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>format-time</name>
        <arity>3</arity>
        <arguments>$value as time, $picture as xs:string, $language as xs:string</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>format-time</name>
        <arity>4</arity>
        <arguments>$value as time, $picture as xs:string, $language as xs:string, $calendar as xs:string</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>format-time</name>
        <arity>5</arity>
        <arguments>$value as time, $picture as xs:string, $language as xs:string, $calendar as xs:string, $country as xs:string</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>function-arity</name>
        <arity>1</arity>
        <arguments>$function as function(*)</arguments>
        <returnType>xs:integer</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>function-available</name>
        <arity>1</arity>
        <arguments>$function-name as xs:string</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>function-available</name>
        <arity>2</arity>
        <arguments>$function-name as xs:string, $arity as xs:integer</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>function-lookup</name>
        <arity>2</arity>
        <arguments>$name as xs:QName, $arity as xs:integer</arguments>
        <returnType>function(*)?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>function-name</name>
        <arity>1</arity>
        <arguments>$function as function(*)</arguments>
        <returnType>xs:QName?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>generate-id</name>
        <arity>0</arity>
        <arguments/>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>generate-id</name>
        <arity>1</arity>
        <arguments>$node as node()?</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>head</name>
        <arity>1</arity>
        <arguments>$seq as item()*</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>hours-from-dateTime</name>
        <arity>1</arity>
        <arguments>$arg as xs:dateTime?</arguments>
        <returnType>xs:integer?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>hours-from-duration</name>
        <arity>1</arity>
        <arguments>$arg as xs:duration?</arguments>
        <returnType>xs:integer?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>hours-from-time</name>
        <arity>1</arity>
        <arguments>$arg as xs:time?</arguments>
        <returnType>xs:integer?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>id</name>
        <arity>1</arity>
        <arguments>$arg as xs:string*</arguments>
        <returnType>element()*</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>id</name>
        <arity>2</arity>
        <arguments>$arg as xs:string*, $node as node()</arguments>
        <returnType>element()*</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>idref</name>
        <arity>1</arity>
        <arguments>$arg as xs:string*</arguments>
        <returnType>node()*</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>idref</name>
        <arity>2</arity>
        <arguments>$arg as xs:string*, $node as node()</arguments>
        <returnType>node()*</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>in-scope-prefixes</name>
        <arity>1</arity>
        <arguments>$element as element()</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>index-of</name>
        <arity>3</arity>
        <arguments>$seqParam as xs:anyAtomicType*, $srchParam as xs:anyAtomicType, $collationLiteral as xs:string</arguments>
        <returnType>xs:integer*</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>insert-before</name>
        <arity>3</arity>
        <arguments>$target as item()*, $position as xs:integer, $inserts as item()*</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>iri-to-uri</name>
        <arity>1</arity>
        <arguments>$uri-part as xs:string</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>key</name>
        <arity>2</arity>
        <arguments>$key-name as xs:string, $key-value as xs:string</arguments>
        <returnType>node()*</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>key</name>
        <arity>3</arity>
        <arguments>$key-name as xs:string, $key-value as xs:string, $top as node()</arguments>
        <returnType>node()*</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>lang</name>
        <arity>1</arity>
        <arguments>$testlang as xs:string?</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>lang</name>
        <arity>2</arity>
        <arguments>$testlang as xs:string?, $node as node()</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>local-name</name>
        <arity>0</arity>
        <arguments/>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>local-name</name>
        <arity>1</arity>
        <arguments>$arg as node()?</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>local-name-from-QName</name>
        <arity>1</arity>
        <arguments>$arg as xs:QName?</arguments>
        <returnType>xs:NCName?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>lower-case</name>
        <arity>1</arity>
        <arguments>$string as xs:string?</arguments>
        <returnType>xs:string?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>map</name>
        <arity>2</arity>
        <arguments>$function as function(item()) as item()*, $seq as item()*</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>map-pairs</name>
        <arity>3</arity>
        <arguments>$function as function(item(), item()) as item()*, $seq1 as item()*, $seq2 as item()*</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>matches</name>
        <arity>2</arity>
        <arguments>$input as xs:string?, $pattern as xs:string</arguments>
        <returnType>xs:boolean?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>matches</name>
        <arity>3</arity>
        <arguments>$input as xs:string?, $pattern as xs:string, $flags as xs:string</arguments>
        <returnType>xs:boolean?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>max</name>
        <arity>1</arity>
        <arguments>$arg as xs:anyAtomicType*</arguments>
        <returnType>xs:anyAtomicType?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>max</name>
        <arity>2</arity>
        <arguments>$arg as xs:anyAtomicType*, $collation as xs:string</arguments>
        <returnType>xs:anyAtomicType?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>min</name>
        <arity>1</arity>
        <arguments>$arg as xs:anyAtomicType*</arguments>
        <returnType>xs:anyAtomicType?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>min</name>
        <arity>2</arity>
        <arguments>$arg as xs:anyAtomicType*, $collation as xs:string</arguments>
        <returnType>xs:anyAtomicType?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>minutes-from-dateTime</name>
        <arity>1</arity>
        <arguments>$arg as xs:dateTime?</arguments>
        <returnType>xs:integer?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>minutes-from-duration</name>
        <arity>1</arity>
        <arguments>$arg as xs:duration?</arguments>
        <returnType>xs:integer?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>minutes-from-time</name>
        <arity>1</arity>
        <arguments>$arg as xs:time?</arguments>
        <returnType>xs:integer?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>month-from-date</name>
        <arity>1</arity>
        <arguments>$arg as xs:dateTime?</arguments>
        <returnType>xs:integer?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>month-from-dateTime</name>
        <arity>1</arity>
        <arguments>$arg as xs:dateTime?</arguments>
        <returnType>xs:integer?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>months-from-duration</name>
        <arity>1</arity>
        <arguments>$arg as xs:duration?</arguments>
        <returnType>xs:integer?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>name</name>
        <arity>0</arity>
        <arguments/>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>name</name>
        <arity>1</arity>
        <arguments>$arg as node()?</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>namespace-uri</name>
        <arity>0</arity>
        <arguments/>
        <returnType>xs:anyURI</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>namespace-uri</name>
        <arity>1</arity>
        <arguments>$arg as node()?</arguments>
        <returnType>xs:anyURI</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>namespace-uri-for-prefix</name>
        <arity>2</arity>
        <arguments>$prefix as xs:string?, $element as element()</arguments>
        <returnType>xs:anyURI?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>namespace-uri-from-QName</name>
        <arity>1</arity>
        <arguments>$arg as xs:QName?</arguments>
        <returnType>xs:anyURI?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>nilled</name>
        <arity>1</arity>
        <arguments>$arg as node()?</arguments>
        <returnType>xs:boolean?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>node-kind</name>
        <arity>1</arity>
        <arguments>$node as node()?</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>node-name</name>
        <arity>1</arity>
        <arguments>$arg as node()?</arguments>
        <returnType>xs:QName?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>normalize-space</name>
        <arity>0</arity>
        <arguments/>
        <returnType>xs:string?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>normalize-space</name>
        <arity>1</arity>
        <arguments>$input as xs:string?</arguments>
        <returnType>xs:string?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>normalize-unicode</name>
        <arity>1</arity>
        <arguments>$arg as xs:string?</arguments>
        <returnType>xs:string?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>normalize-unicode</name>
        <arity>2</arity>
        <arguments>$arg as xs:string?, $normalizationForm as xs:string</arguments>
        <returnType>xs:string?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>not</name>
        <arity>1</arity>
        <arguments>$arg as item()*</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>number</name>
        <arity>0</arity>
        <arguments/>
        <returnType>xs:double</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>number</name>
        <arity>1</arity>
        <arguments>$arg as xs:anyAtomicType?</arguments>
        <returnType>xs:double</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>one-or-more</name>
        <arity>1</arity>
        <arguments>$arg as item()*</arguments>
        <returnType>item()+</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>prefix-from-QName</name>
        <arity>1</arity>
        <arguments>$arg as xs:QName?</arguments>
        <returnType>xs:NCName?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>regex-group</name>
        <arity>1</arity>
        <arguments>$group-number as xs:integer</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>remove</name>
        <arity>2</arity>
        <arguments>$target as item()*, $position as xs:integer</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>replace</name>
        <arity>3</arity>
        <arguments>$input as xs:string?, $pattern as xs:string, $replacement as xs:string</arguments>
        <returnType>xs:string?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>replace</name>
        <arity>4</arity>
        <arguments>$input as xs:string?, $pattern as xs:string, $replacement as xs:string, $flags as xs:string</arguments>
        <returnType>xs:string?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>resolve-QName</name>
        <arity>2</arity>
        <arguments>$qname as xs:string?, $element as element()</arguments>
        <returnType>xs:QName?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>resolve-uri</name>
        <arity>1</arity>
        <arguments>$relative as xs:string?</arguments>
        <returnType>xs:anyURI?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>resolve-uri</name>
        <arity>2</arity>
        <arguments>$relative as xs:string?, $base as xs:string</arguments>
        <returnType>xs:anyURI?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>reverse</name>
        <arity>1</arity>
        <arguments>$target as item()*</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>root</name>
        <arity>0</arity>
        <arguments/>
        <returnType>node()?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>root</name>
        <arity>1</arity>
        <arguments>$arg as node()?</arguments>
        <returnType>node()?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>round</name>
        <arity>1</arity>
        <arguments>$arg as numeric?</arguments>
        <returnType>numeric?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>round-half-to-even</name>
        <arity>1</arity>
        <arguments>$arg as numeric?</arguments>
        <returnType>numeric?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>round-half-to-even</name>
        <arity>2</arity>
        <arguments>$arg as numeric?, $precision as xs:integer</arguments>
        <returnType>numeric?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>seconds-from-dateTime</name>
        <arity>1</arity>
        <arguments>$arg as xs:dateTime?</arguments>
        <returnType>xs:decimal?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>seconds-from-duration</name>
        <arity>1</arity>
        <arguments>$arg as xs:duration?</arguments>
        <returnType>xs:decimal?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>seconds-from-time</name>
        <arity>1</arity>
        <arguments>$arg as xs:time?</arguments>
        <returnType>xs:decimal?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>starts-with</name>
        <arity>2</arity>
        <arguments>$parameter1 as xs:string?, $parameter2 as xs:string?</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>starts-with</name>
        <arity>3</arity>
        <arguments>$parameter1 as xs:string?, $parameter2 as xs:string?, $collation as xs:string</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>string</name>
        <arity>0</arity>
        <arguments/>
        <returnType>xs:string?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>string</name>
        <arity>1</arity>
        <arguments>$arg as item()?</arguments>
        <returnType>xs:string?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>string-join</name>
        <arity>2</arity>
        <arguments>$parameter1 as xs:string*, $parameter2 as xs:string</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>string-length</name>
        <arity>0</arity>
        <arguments/>
        <returnType>xs:integer?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>string-length</name>
        <arity>1</arity>
        <arguments>$sourceString as xs:string?</arguments>
        <returnType>xs:integer?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>string-pad</name>
        <arity>2</arity>
        <arguments>$padString as xs:string?, $padCount as xs:integer</arguments>
        <returnType>xs:string?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>string-to-codepoints</name>
        <arity>1</arity>
        <arguments>$arg as xs:string</arguments>
        <returnType>xs:integer*</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>subsequence</name>
        <arity>2</arity>
        <arguments>$sourceSeq as item()*, $startingLoc as xs:double</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>subsequence</name>
        <arity>3</arity>
        <arguments>$sourceSeq as item()*, $startingLoc as xs:double, $length as xs:double</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>substring</name>
        <arity>2</arity>
        <arguments>$sourceString as xs:string?, $startingLoc as xs:double</arguments>
        <returnType>xs:string?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>substring</name>
        <arity>3</arity>
        <arguments>$sourceString as xs:string?, $startingLoc as xs:double, $length as xs:double</arguments>
        <returnType>xs:string?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>substring-after</name>
        <arity>2</arity>
        <arguments>$input as xs:string?, $after as xs:string?</arguments>
        <returnType>xs:string?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>substring-after</name>
        <arity>3</arity>
        <arguments>$input as xs:string?, $after as xs:string?, $collation as xs:string</arguments>
        <returnType>xs:string?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>substring-before</name>
        <arity>2</arity>
        <arguments>$input as xs:string?, $before as xs:string?</arguments>
        <returnType>xs:string?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>substring-before</name>
        <arity>3</arity>
        <arguments>$input as xs:string?, $before as xs:string?, $collation as xs:string</arguments>
        <returnType>xs:string?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>subtract-dateTimes-yielding-dayTimeDuration</name>
        <arity>2</arity>
        <arguments>$srcval1 as xs:dateTime, $srcval1 as xs:dateTime</arguments>
        <returnType>xdt:dayTimeDuration</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>subtract-dateTimes-yielding-yearMonthDuration</name>
        <arity>2</arity>
        <arguments>$srcval1 as xs:dateTime, $srcval1 as xs:dateTime</arguments>
        <returnType>xdt:yearMonthDuration</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>sum</name>
        <arity>1</arity>
        <arguments>$arg as xs:anyAtomicType*</arguments>
        <returnType>xs:anyAtomicType?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>sum</name>
        <arity>2</arity>
        <arguments>$arg as xs:anyAtomicType*, $zero as xs:anyAtomicType?</arguments>
        <returnType>xs:anyAtomicType?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>system-property</name>
        <arity>1</arity>
        <arguments>$property-name as xs:string</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>tail</name>
        <arity>1</arity>
        <arguments>$seq as item()*</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>timezone-from-date</name>
        <arity>1</arity>
        <arguments>$arg as xs:dateTime?</arguments>
        <returnType>xs:dayTimeDuration?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>timezone-from-dateTime</name>
        <arity>1</arity>
        <arguments>$arg as xs:dateTime?</arguments>
        <returnType>xs:dayTimeDuration?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>timezone-from-time</name>
        <arity>1</arity>
        <arguments>$arg as xs:time?</arguments>
        <returnType>xs:dayTimeDuration?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>tokenize</name>
        <arity>2</arity>
        <arguments>$input as xs:string?, $pattern as xs:string</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>tokenize</name>
        <arity>3</arity>
        <arguments>$input as xs:string?, $pattern as xs:string, $flags as xs:string</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>trace</name>
        <arity>2</arity>
        <arguments>$value as item()*, $label as xs:string</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>translate</name>
        <arity>3</arity>
        <arguments>$src as xs:string?, $mapString as xs:string?, $transString as xs:string?</arguments>
        <returnType>xs:string?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>type-available</name>
        <arity>1</arity>
        <arguments>$type-name as xs:string</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>unordered</name>
        <arity>1</arity>
        <arguments>$sourceSeq as item()*</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>unparsed-entity-public-id</name>
        <arity>1</arity>
        <arguments>$entity-name as xs:string</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>unparsed-entity-uri</name>
        <arity>1</arity>
        <arguments>$entity-name as xs:string</arguments>
        <returnType>xs:anyURI</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>unparsed-text</name>
        <arity>1</arity>
        <arguments>$href as xs:string</arguments>
        <returnType>xs:string?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>unparsed-text</name>
        <arity>2</arity>
        <arguments>$href as xs:string, $encoding as xs:string</arguments>
        <returnType>xs:string?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>unparsed-text-available</name>
        <arity>1</arity>
        <arguments>$href as xs:string</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>unparsed-text-available</name>
        <arity>2</arity>
        <arguments>$href as xs:string, $encoding as xs:string</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>upper-case</name>
        <arity>1</arity>
        <arguments>$string as xs:string?</arguments>
        <returnType>xs:string?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>year-from-date</name>
        <arity>1</arity>
        <arguments>$arg as xs:dateTime?</arguments>
        <returnType>xs:integer?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>year-from-dateTime</name>
        <arity>1</arity>
        <arguments>$arg as xs:dateTime?</arguments>
        <returnType>xs:integer?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>years-from-duration</name>
        <arity>1</arity>
        <arguments>$arg as xs:duration?</arguments>
        <returnType>xs:integer?</returnType>
    </function>
    <function>
        <prefix>fn</prefix>
        <name>zero-or-one</name>
        <arity>1</arity>
        <arguments>$arg as item()*</arguments>
        <returnType>item()?</returnType>
    </function>
    <function>
        <prefix>json</prefix>
        <name>array</name>
        <arity>0</arity>
        <arguments/>
        <returnType>json:array</returnType>
    </function>
    <function>
        <prefix>json</prefix>
        <name>array</name>
        <arity>1</arity>
        <arguments>$array as element(json:array)</arguments>
        <returnType>json:array</returnType>
    </function>
    <function>
        <prefix>json</prefix>
        <name>array-pop</name>
        <arity>1</arity>
        <arguments>$array as json:array</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>json</prefix>
        <name>array-push</name>
        <arity>2</arity>
        <arguments>$array as json:array, $item as item()*</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>json</prefix>
        <name>array-resize</name>
        <arity>2</arity>
        <arguments>$array as json:array, $newSize as xs:unsignedLong</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>json</prefix>
        <name>array-resize</name>
        <arity>3</arity>
        <arguments>$array as json:array, $newSize as xs:unsignedLong, $zero as item()?</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>json</prefix>
        <name>array-size</name>
        <arity>1</arity>
        <arguments>$array as json:array?</arguments>
        <returnType>xs:unsignedLong?</returnType>
    </function>
    <function>
        <prefix>json</prefix>
        <name>array-values</name>
        <arity>1</arity>
        <arguments>$array as json:array</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>json</prefix>
        <name>array-values</name>
        <arity>2</arity>
        <arguments>$array as json:array, $flatten as xs:boolean?</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>json</prefix>
        <name>object</name>
        <arity>0</arity>
        <arguments/>
        <returnType>map:map</returnType>
    </function>
    <function>
        <prefix>json</prefix>
        <name>object</name>
        <arity>1</arity>
        <arguments>$map as element(json:object)</arguments>
        <returnType>map:map</returnType>
    </function>
    <function>
        <prefix>json</prefix>
        <name>object-define</name>
        <arity>0</arity>
        <arguments/>
        <returnType>json:object</returnType>
    </function>
    <function>
        <prefix>json</prefix>
        <name>object-define</name>
        <arity>1</arity>
        <arguments>$keys as xs:string*</arguments>
        <returnType>json:object</returnType>
    </function>
    <function>
        <prefix>json</prefix>
        <name>set-item-at</name>
        <arity>3</arity>
        <arguments>$array as json:array, $pos as xs:double, $value as item()*</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>json</prefix>
        <name>subarray</name>
        <arity>2</arity>
        <arguments>$array as json:array, $startingLoc as xs:double</arguments>
        <returnType>json:array</returnType>
    </function>
    <function>
        <prefix>json</prefix>
        <name>subarray</name>
        <arity>3</arity>
        <arguments>$array as json:array, $startingLoc as xs:double, $length as xs:double</arguments>
        <returnType>json:array</returnType>
    </function>
    <function>
        <prefix>json</prefix>
        <name>to-array</name>
        <arity>0</arity>
        <arguments/>
        <returnType>json:array</returnType>
    </function>
    <function>
        <prefix>json</prefix>
        <name>to-array</name>
        <arity>1</arity>
        <arguments>$items as item()*</arguments>
        <returnType>json:array</returnType>
    </function>
    <function>
        <prefix>json</prefix>
        <name>to-array</name>
        <arity>2</arity>
        <arguments>$items as item()*, $limit as xs:double?</arguments>
        <returnType>json:array</returnType>
    </function>
    <function>
        <prefix>json</prefix>
        <name>to-array</name>
        <arity>3</arity>
        <arguments>$items as item()*, $limit as xs:double?, $zero as item()?</arguments>
        <returnType>json:array</returnType>
    </function>
    <function>
        <prefix>map</prefix>
        <name>clear</name>
        <arity>1</arity>
        <arguments>$map as map:map</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>map</prefix>
        <name>contains</name>
        <arity>2</arity>
        <arguments>$map as map:map, $key as xs:string</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>map</prefix>
        <name>count</name>
        <arity>1</arity>
        <arguments>$map as map:map</arguments>
        <returnType>xs:unsignedInt</returnType>
    </function>
    <function>
        <prefix>map</prefix>
        <name>delete</name>
        <arity>2</arity>
        <arguments>$map as map:map, $key as xs:string</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>map</prefix>
        <name>entry</name>
        <arity>2</arity>
        <arguments>$key as xs:string, $value as item()*</arguments>
        <returnType>map:map</returnType>
    </function>
    <function>
        <prefix>map</prefix>
        <name>get</name>
        <arity>2</arity>
        <arguments>$map as map:map, $key as xs:string</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>map</prefix>
        <name>keys</name>
        <arity>1</arity>
        <arguments>$map as map:map</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>map</prefix>
        <name>map</name>
        <arity>0</arity>
        <arguments/>
        <returnType>map:map</returnType>
    </function>
    <function>
        <prefix>map</prefix>
        <name>map</name>
        <arity>1</arity>
        <arguments>$map as element(map:map)</arguments>
        <returnType>map:map</returnType>
    </function>
    <function>
        <prefix>map</prefix>
        <name>new</name>
        <arity>0</arity>
        <arguments/>
        <returnType>map:map</returnType>
    </function>
    <function>
        <prefix>map</prefix>
        <name>new</name>
        <arity>1</arity>
        <arguments>$maps as map:map*</arguments>
        <returnType>map:map</returnType>
    </function>
    <function>
        <prefix>map</prefix>
        <name>put</name>
        <arity>3</arity>
        <arguments>$map as map:map, $key as xs:string, $value as item()*</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>math</prefix>
        <name>acos</name>
        <arity>1</arity>
        <arguments>$x as xs:double</arguments>
        <returnType>xs:double</returnType>
    </function>
    <function>
        <prefix>math</prefix>
        <name>asin</name>
        <arity>1</arity>
        <arguments>$x as xs:double</arguments>
        <returnType>xs:double</returnType>
    </function>
    <function>
        <prefix>math</prefix>
        <name>atan</name>
        <arity>1</arity>
        <arguments>$x as xs:double</arguments>
        <returnType>xs:double</returnType>
    </function>
    <function>
        <prefix>math</prefix>
        <name>atan2</name>
        <arity>2</arity>
        <arguments>$y as xs:double, $x as xs:double</arguments>
        <returnType>xs:double</returnType>
    </function>
    <function>
        <prefix>math</prefix>
        <name>ceil</name>
        <arity>1</arity>
        <arguments>$x as xs:double</arguments>
        <returnType>xs:double</returnType>
    </function>
    <function>
        <prefix>math</prefix>
        <name>correlation</name>
        <arity>1</arity>
        <arguments>$arg as json:array*</arguments>
        <returnType>xs:double?</returnType>
    </function>
    <function>
        <prefix>math</prefix>
        <name>cos</name>
        <arity>1</arity>
        <arguments>$x as xs:double</arguments>
        <returnType>xs:double</returnType>
    </function>
    <function>
        <prefix>math</prefix>
        <name>cosh</name>
        <arity>1</arity>
        <arguments>$x as xs:double</arguments>
        <returnType>xs:double</returnType>
    </function>
    <function>
        <prefix>math</prefix>
        <name>cot</name>
        <arity>1</arity>
        <arguments>$x as xs:double</arguments>
        <returnType>xs:double</returnType>
    </function>
    <function>
        <prefix>math</prefix>
        <name>covariance</name>
        <arity>1</arity>
        <arguments>$arg as json:array*</arguments>
        <returnType>xs:double?</returnType>
    </function>
    <function>
        <prefix>math</prefix>
        <name>covariance-p</name>
        <arity>1</arity>
        <arguments>$arg as json:array*</arguments>
        <returnType>xs:double?</returnType>
    </function>
    <function>
        <prefix>math</prefix>
        <name>degrees</name>
        <arity>1</arity>
        <arguments>$x as xs:double</arguments>
        <returnType>xs:double</returnType>
    </function>
    <function>
        <prefix>math</prefix>
        <name>exp</name>
        <arity>1</arity>
        <arguments>$x as xs:double</arguments>
        <returnType>xs:double</returnType>
    </function>
    <function>
        <prefix>math</prefix>
        <name>fabs</name>
        <arity>1</arity>
        <arguments>$x as xs:double</arguments>
        <returnType>xs:double</returnType>
    </function>
    <function>
        <prefix>math</prefix>
        <name>floor</name>
        <arity>1</arity>
        <arguments>$x as xs:double</arguments>
        <returnType>xs:double</returnType>
    </function>
    <function>
        <prefix>math</prefix>
        <name>fmod</name>
        <arity>2</arity>
        <arguments>$x as xs:double, $x as xs:double</arguments>
        <returnType>xs:double</returnType>
    </function>
    <function>
        <prefix>math</prefix>
        <name>frexp</name>
        <arity>1</arity>
        <arguments>$x as xs:double</arguments>
        <returnType>(xs:double,xs:integer)</returnType>
    </function>
    <function>
        <prefix>math</prefix>
        <name>ldexp</name>
        <arity>2</arity>
        <arguments>$y as xs:double, $i as xs:integer</arguments>
        <returnType>xs:double</returnType>
    </function>
    <function>
        <prefix>math</prefix>
        <name>linear-model</name>
        <arity>1</arity>
        <arguments>$arg as json:array*</arguments>
        <returnType>math:linear-model?</returnType>
    </function>
    <function>
        <prefix>math</prefix>
        <name>linear-model-coeff</name>
        <arity>1</arity>
        <arguments>$linear-model as math:linear-model</arguments>
        <returnType>xs:double*</returnType>
    </function>
    <function>
        <prefix>math</prefix>
        <name>linear-model-intercept</name>
        <arity>1</arity>
        <arguments>$linear-model as math:linear-model</arguments>
        <returnType>xs:double</returnType>
    </function>
    <function>
        <prefix>math</prefix>
        <name>linear-model-rsquared</name>
        <arity>1</arity>
        <arguments>$linear-model as math:linear-model</arguments>
        <returnType>xs:double</returnType>
    </function>
    <function>
        <prefix>math</prefix>
        <name>log</name>
        <arity>1</arity>
        <arguments>$x as xs:double</arguments>
        <returnType>xs:double</returnType>
    </function>
    <function>
        <prefix>math</prefix>
        <name>log10</name>
        <arity>1</arity>
        <arguments>$x as xs:double</arguments>
        <returnType>xs:double</returnType>
    </function>
    <function>
        <prefix>math</prefix>
        <name>median</name>
        <arity>1</arity>
        <arguments>$arg as xs:double*</arguments>
        <returnType>xs:double?</returnType>
    </function>
    <function>
        <prefix>math</prefix>
        <name>mode</name>
        <arity>1</arity>
        <arguments>$arg as xs:anyAtomicType*</arguments>
        <returnType>xs:anyAtomicType*</returnType>
    </function>
    <function>
        <prefix>math</prefix>
        <name>mode</name>
        <arity>2</arity>
        <arguments>$arg as xs:anyAtomicType*, $options as xs:string*</arguments>
        <returnType>xs:anyAtomicType*</returnType>
    </function>
    <function>
        <prefix>math</prefix>
        <name>modf</name>
        <arity>1</arity>
        <arguments>$x as xs:double</arguments>
        <returnType>(xs:double,xs:double)</returnType>
    </function>
    <function>
        <prefix>math</prefix>
        <name>percent-rank</name>
        <arity>2</arity>
        <arguments>$arg as xs:anyAtomicType*, $value as xs:anyAtomicType</arguments>
        <returnType>xs:double?</returnType>
    </function>
    <function>
        <prefix>math</prefix>
        <name>percent-rank</name>
        <arity>3</arity>
        <arguments>$arg as xs:anyAtomicType*, $value as xs:anyAtomicType, $options as xs:string*</arguments>
        <returnType>xs:double?</returnType>
    </function>
    <function>
        <prefix>math</prefix>
        <name>percentile</name>
        <arity>2</arity>
        <arguments>$arg as xs:double*, $p as xs:double*</arguments>
        <returnType>xs:double*</returnType>
    </function>
    <function>
        <prefix>math</prefix>
        <name>pow</name>
        <arity>2</arity>
        <arguments>$x as xs:double, $y as xs:double</arguments>
        <returnType>xs:double</returnType>
    </function>
    <function>
        <prefix>math</prefix>
        <name>radians</name>
        <arity>1</arity>
        <arguments>$x as xs:double</arguments>
        <returnType>xs:double</returnType>
    </function>
    <function>
        <prefix>math</prefix>
        <name>rank</name>
        <arity>2</arity>
        <arguments>$arg as xs:anyAtomicType*, $arg as xs:anyAtomicType</arguments>
        <returnType>xs:integer?</returnType>
    </function>
    <function>
        <prefix>math</prefix>
        <name>rank</name>
        <arity>3</arity>
        <arguments>$arg as xs:anyAtomicType*, $arg as xs:anyAtomicType, $options as xs:string*</arguments>
        <returnType>xs:integer?</returnType>
    </function>
    <function>
        <prefix>math</prefix>
        <name>sin</name>
        <arity>1</arity>
        <arguments>$x as xs:double</arguments>
        <returnType>xs:double</returnType>
    </function>
    <function>
        <prefix>math</prefix>
        <name>sinh</name>
        <arity>1</arity>
        <arguments>$x as xs:double</arguments>
        <returnType>xs:double</returnType>
    </function>
    <function>
        <prefix>math</prefix>
        <name>sqrt</name>
        <arity>1</arity>
        <arguments>$x as xs:double</arguments>
        <returnType>xs:double</returnType>
    </function>
    <function>
        <prefix>math</prefix>
        <name>stddev</name>
        <arity>1</arity>
        <arguments>$arg as xs:double*</arguments>
        <returnType>xs:double?</returnType>
    </function>
    <function>
        <prefix>math</prefix>
        <name>stddev-p</name>
        <arity>1</arity>
        <arguments>$arg as xs:double*</arguments>
        <returnType>xs:double?</returnType>
    </function>
    <function>
        <prefix>math</prefix>
        <name>tan</name>
        <arity>1</arity>
        <arguments>$x as xs:double</arguments>
        <returnType>xs:double</returnType>
    </function>
    <function>
        <prefix>math</prefix>
        <name>tanh</name>
        <arity>1</arity>
        <arguments>$x as xs:double</arguments>
        <returnType>xs:double</returnType>
    </function>
    <function>
        <prefix>math</prefix>
        <name>trunc</name>
        <arity>2</arity>
        <arguments>$arg as numeric?, $n as xs:integer</arguments>
        <returnType>numeric?</returnType>
    </function>
    <function>
        <prefix>math</prefix>
        <name>variance</name>
        <arity>1</arity>
        <arguments>$arg as xs:double*</arguments>
        <returnType>xs:double?</returnType>
    </function>
    <function>
        <prefix>math</prefix>
        <name>variance-p</name>
        <arity>1</arity>
        <arguments>$arg as xs:double*</arguments>
        <returnType>xs:double?</returnType>
    </function>
    <function>
        <prefix>prof</prefix>
        <name>allowed</name>
        <arity>1</arity>
        <arguments>$request-id as xs:unsignedLong</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>prof</prefix>
        <name>disable</name>
        <arity>1</arity>
        <arguments>$request-id as xs:unsignedLong</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>prof</prefix>
        <name>enable</name>
        <arity>1</arity>
        <arguments>$request-id as xs:unsignedLong</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>prof</prefix>
        <name>eval</name>
        <arity>1</arity>
        <arguments>$xquery as xs:string</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>prof</prefix>
        <name>eval</name>
        <arity>2</arity>
        <arguments>$xquery as xs:string, $vars as item()*</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>prof</prefix>
        <name>eval</name>
        <arity>3</arity>
        <arguments>$xquery as xs:string, $vars as item()*, $options as node()?</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>prof</prefix>
        <name>invoke</name>
        <arity>1</arity>
        <arguments>$path as xs:string</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>prof</prefix>
        <name>invoke</name>
        <arity>2</arity>
        <arguments>$path as xs:string, $vars as item()*</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>prof</prefix>
        <name>invoke</name>
        <arity>3</arity>
        <arguments>$path as xs:string, $vars as item()*, $options as node()?</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>prof</prefix>
        <name>report</name>
        <arity>1</arity>
        <arguments>$request-id as xs:unsignedLong</arguments>
        <returnType>element(prof:report)?</returnType>
    </function>
    <function>
        <prefix>prof</prefix>
        <name>reset</name>
        <arity>1</arity>
        <arguments>$request-id as xs:unsignedLong</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>prof</prefix>
        <name>value</name>
        <arity>1</arity>
        <arguments>$expr as xs:string</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>prof</prefix>
        <name>xslt-eval</name>
        <arity>2</arity>
        <arguments>$stylesheet as element(), $input as node()?</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>prof</prefix>
        <name>xslt-eval</name>
        <arity>3</arity>
        <arguments>$stylesheet as element(), $input as node()?, $params as map:map?</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>prof</prefix>
        <name>xslt-eval</name>
        <arity>4</arity>
        <arguments>$stylesheet as element(), $input as node()?, $params as map:map?, $options as node()?</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>prof</prefix>
        <name>xslt-invoke</name>
        <arity>2</arity>
        <arguments>$path as xs:string, $input as node()?</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>prof</prefix>
        <name>xslt-invoke</name>
        <arity>3</arity>
        <arguments>$path as xs:string, $input as node()?, $params as map:map?</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>prof</prefix>
        <name>xslt-invoke</name>
        <arity>4</arity>
        <arguments>$path as xs:string, $input as node()?, $params as map:map?, $options as node()?</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>rdf</prefix>
        <name>langString</name>
        <arity>2</arity>
        <arguments>$string as xs:string, $lang as xs:string</arguments>
        <returnType>rdf:langString</returnType>
    </function>
    <function>
        <prefix>rdf</prefix>
        <name>langString-language</name>
        <arity>1</arity>
        <arguments>$val as sem:unknown</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>sc</prefix>
        <name>annotations</name>
        <arity>0</arity>
        <arguments/>
        <returnType>element()*</returnType>
    </function>
    <function>
        <prefix>sc</prefix>
        <name>annotations</name>
        <arity>1</arity>
        <arguments>$arg as schema-component()</arguments>
        <returnType>element()*</returnType>
    </function>
    <function>
        <prefix>sc</prefix>
        <name>attribute-decl</name>
        <arity>0</arity>
        <arguments/>
        <returnType>attribute-decl()?</returnType>
    </function>
    <function>
        <prefix>sc</prefix>
        <name>attribute-decl</name>
        <arity>1</arity>
        <arguments>$arg as item()</arguments>
        <returnType>attribute-decl()?</returnType>
    </function>
    <function>
        <prefix>sc</prefix>
        <name>attributes</name>
        <arity>0</arity>
        <arguments/>
        <returnType>attribute-decl()*</returnType>
    </function>
    <function>
        <prefix>sc</prefix>
        <name>attributes</name>
        <arity>1</arity>
        <arguments>$arg as schema-component()</arguments>
        <returnType>attribute-decl()*</returnType>
    </function>
    <function>
        <prefix>sc</prefix>
        <name>canonical-path</name>
        <arity>0</arity>
        <arguments/>
        <returnType>xs:string?</returnType>
    </function>
    <function>
        <prefix>sc</prefix>
        <name>canonical-path</name>
        <arity>1</arity>
        <arguments>$arg as schema-component()</arguments>
        <returnType>xs:string?</returnType>
    </function>
    <function>
        <prefix>sc</prefix>
        <name>complex-type</name>
        <arity>0</arity>
        <arguments/>
        <returnType>complex-type()?</returnType>
    </function>
    <function>
        <prefix>sc</prefix>
        <name>complex-type</name>
        <arity>1</arity>
        <arguments>$arg as item()</arguments>
        <returnType>complex-type()?</returnType>
    </function>
    <function>
        <prefix>sc</prefix>
        <name>component-property</name>
        <arity>1</arity>
        <arguments>$propname as xs:string</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>sc</prefix>
        <name>component-property</name>
        <arity>2</arity>
        <arguments>$propname as xs:string, $arg as schema-component()</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>sc</prefix>
        <name>element-decl</name>
        <arity>0</arity>
        <arguments/>
        <returnType>element-decl()?</returnType>
    </function>
    <function>
        <prefix>sc</prefix>
        <name>element-decl</name>
        <arity>1</arity>
        <arguments>$arg as item()</arguments>
        <returnType>element-decl()?</returnType>
    </function>
    <function>
        <prefix>sc</prefix>
        <name>facets</name>
        <arity>0</arity>
        <arguments/>
        <returnType>element()*</returnType>
    </function>
    <function>
        <prefix>sc</prefix>
        <name>facets</name>
        <arity>1</arity>
        <arguments>$arg as schema-component()</arguments>
        <returnType>element()*</returnType>
    </function>
    <function>
        <prefix>sc</prefix>
        <name>function-parameter-type</name>
        <arity>2</arity>
        <arguments>$arg as function(*), $param as xs:integer</arguments>
        <returnType>schema-type()?</returnType>
    </function>
    <function>
        <prefix>sc</prefix>
        <name>function-return-type</name>
        <arity>0</arity>
        <arguments/>
        <returnType>schema-type()</returnType>
    </function>
    <function>
        <prefix>sc</prefix>
        <name>function-return-type</name>
        <arity>1</arity>
        <arguments>$arg as function(*)</arguments>
        <returnType>schema-type()</returnType>
    </function>
    <function>
        <prefix>sc</prefix>
        <name>name</name>
        <arity>0</arity>
        <arguments/>
        <returnType>xs:QName?</returnType>
    </function>
    <function>
        <prefix>sc</prefix>
        <name>name</name>
        <arity>1</arity>
        <arguments>$arg as schema-component()</arguments>
        <returnType>xs:QName?</returnType>
    </function>
    <function>
        <prefix>sc</prefix>
        <name>particles</name>
        <arity>0</arity>
        <arguments/>
        <returnType>schema-particle()*</returnType>
    </function>
    <function>
        <prefix>sc</prefix>
        <name>particles</name>
        <arity>1</arity>
        <arguments>$arg as schema-component()</arguments>
        <returnType>schema-particle()*</returnType>
    </function>
    <function>
        <prefix>sc</prefix>
        <name>schema</name>
        <arity>0</arity>
        <arguments/>
        <returnType>schema-root()?</returnType>
    </function>
    <function>
        <prefix>sc</prefix>
        <name>schema</name>
        <arity>1</arity>
        <arguments>$arg as item()</arguments>
        <returnType>schema-root()?</returnType>
    </function>
    <function>
        <prefix>sc</prefix>
        <name>schema-from-path</name>
        <arity>1</arity>
        <arguments>$namespace as xs:string</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>sc</prefix>
        <name>schema-from-path</name>
        <arity>2</arity>
        <arguments>$namespace as xs:string, $location as xs:string</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>sc</prefix>
        <name>simple-type</name>
        <arity>0</arity>
        <arguments/>
        <returnType>simple-type()?</returnType>
    </function>
    <function>
        <prefix>sc</prefix>
        <name>simple-type</name>
        <arity>1</arity>
        <arguments>$arg as item()</arguments>
        <returnType>simple-type()?</returnType>
    </function>
    <function>
        <prefix>sc</prefix>
        <name>type</name>
        <arity>0</arity>
        <arguments/>
        <returnType>schema-type()?</returnType>
    </function>
    <function>
        <prefix>sc</prefix>
        <name>type</name>
        <arity>1</arity>
        <arguments>$arg as item()</arguments>
        <returnType>schema-type()?</returnType>
    </function>
    <function>
        <prefix>sc</prefix>
        <name>type-apply</name>
        <arity>2</arity>
        <arguments>$type as schema-type(), $arg as item()*</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>sc</prefix>
        <name>type-named</name>
        <arity>0</arity>
        <arguments/>
        <returnType>schema-type()?</returnType>
    </function>
    <function>
        <prefix>sc</prefix>
        <name>type-named</name>
        <arity>1</arity>
        <arguments>$arg as xs:QName</arguments>
        <returnType>schema-type()?</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>binding</name>
        <arity>0</arity>
        <arguments/>
        <returnType>sem:binding</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>binding</name>
        <arity>1</arity>
        <arguments>$map as element(json:object)</arguments>
        <returnType>sem:binding</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>coalesce</name>
        <arity>1</arity>
        <arguments>$parameter1 as item()*</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>coalesce</name>
        <arity>2</arity>
        <arguments>$parameter1 as item()*, $parameterN as item()*,...</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>curie-expand</name>
        <arity>1</arity>
        <arguments>$curie as xs:string</arguments>
        <returnType>sem:iri</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>curie-expand</name>
        <arity>2</arity>
        <arguments>$curie as xs:string, $mapping as map:map</arguments>
        <returnType>sem:iri</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>curie-shorten</name>
        <arity>1</arity>
        <arguments>$iri as sem:iri</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>curie-shorten</name>
        <arity>2</arity>
        <arguments>$iri as sem:iri, $mapping as map:map</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>database-nodes</name>
        <arity>1</arity>
        <arguments>$triples as sem:triple*</arguments>
        <returnType>node()*</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>database-nodes</name>
        <arity>2</arity>
        <arguments>$triples as sem:triple*, $options as xs:string*</arguments>
        <returnType>node()*</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>database-nodes</name>
        <arity>3</arity>
        <arguments>$triples as sem:triple*, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>node()*</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>datatype</name>
        <arity>1</arity>
        <arguments>$value as xs:anyAtomicType</arguments>
        <returnType>sem:iri</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>describe</name>
        <arity>1</arity>
        <arguments>$iris as sem:iri*</arguments>
        <returnType>sem:triple*</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>graph</name>
        <arity>1</arity>
        <arguments>$graphname as sem:iri</arguments>
        <returnType>sem:triple*</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>graph-delete</name>
        <arity>1</arity>
        <arguments>$graphname as sem:iri</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>graph-insert</name>
        <arity>2</arity>
        <arguments>$graphname as sem:iri, $triples as sem:triple*</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>graph-insert</name>
        <arity>3</arity>
        <arguments>$graphname as sem:iri, $triples as sem:triple*, $permissions as element(sec:permission)*</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>graph-insert</name>
        <arity>4</arity>
        <arguments>$graphname as sem:iri, $triples as sem:triple*, $permissions as element(sec:permission)*, $collections as xs:string*</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>graph-insert</name>
        <arity>5</arity>
        <arguments>$graphname as sem:iri, $triples as sem:triple*, $permissions as element(sec:permission)*, $collections as xs:string*, $quality as xs:int?</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>graph-insert</name>
        <arity>6</arity>
        <arguments>$graphname as sem:iri, $triples as sem:triple*, $permissions as element(sec:permission)*, $collections as xs:string*, $quality as xs:int?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>if</name>
        <arity>3</arity>
        <arguments>$condition as xs:boolean, $then as item()*, $else as item()*</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>invalid</name>
        <arity>2</arity>
        <arguments>$string as xs:string, $datatype as sem:iri</arguments>
        <returnType>sem:invalid</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>invalid-datatype</name>
        <arity>1</arity>
        <arguments>$val as sem:invalid</arguments>
        <returnType>sem:iri</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>iri</name>
        <arity>1</arity>
        <arguments>$string-iri as xs:string</arguments>
        <returnType>sem:iri</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>isBlank</name>
        <arity>1</arity>
        <arguments>$value as xs:anyAtomicType</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>isIRI</name>
        <arity>1</arity>
        <arguments>$value as xs:anyAtomicType</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>isLiteral</name>
        <arity>1</arity>
        <arguments>$value as xs:anyAtomicType</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>lang</name>
        <arity>1</arity>
        <arguments>$value as xs:anyAtomicType</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>langMatches</name>
        <arity>2</arity>
        <arguments>$lang-tag as xs:string, $lang-range as xs:string</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>prefixes</name>
        <arity>1</arity>
        <arguments>$prefixdef as xs:string?</arguments>
        <returnType>map:map</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>prefixes</name>
        <arity>2</arity>
        <arguments>$prefixdef as xs:string?, $include-common as xs:boolean?</arguments>
        <returnType>map:map</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>query-results-serialize</name>
        <arity>1</arity>
        <arguments>$results as item()*</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>query-results-serialize</name>
        <arity>2</arity>
        <arguments>$results as item()*, $options as xs:string*</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>rdf-builder</name>
        <arity>0</arity>
        <arguments/>
        <returnType>function(item(),item(),item()sem:triple</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>rdf-builder</name>
        <arity>1</arity>
        <arguments>$prefixes as map:map?</arguments>
        <returnType>function(item(),item(),item()sem:triple</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>rdf-builder</name>
        <arity>2</arity>
        <arguments>$prefixes as map:map?, $graph as sem:iri?</arguments>
        <returnType>function(item(),item(),item()sem:triple</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>rdf-get</name>
        <arity>1</arity>
        <arguments>$location as xs:string</arguments>
        <returnType>sem:triple*</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>rdf-get</name>
        <arity>2</arity>
        <arguments>$location as xs:string, $options as xs:string*</arguments>
        <returnType>sem:triple*</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>rdf-get</name>
        <arity>3</arity>
        <arguments>$location as xs:string, $options as xs:string*, $http-opts as element()?</arguments>
        <returnType>sem:triple*</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>rdf-insert</name>
        <arity>1</arity>
        <arguments>$triples as sem:triple*</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>rdf-insert</name>
        <arity>2</arity>
        <arguments>$triples as sem:triple*, $options as xs:string*</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>rdf-insert</name>
        <arity>3</arity>
        <arguments>$triples as sem:triple*, $options as xs:string*, $permissions as element(sec:permission)*</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>rdf-insert</name>
        <arity>4</arity>
        <arguments>$triples as sem:triple*, $options as xs:string*, $permissions as element(sec:permission)*, $collections as xs:string*</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>rdf-insert</name>
        <arity>5</arity>
        <arguments>$triples as sem:triple*, $options as xs:string*, $permissions as element(sec:permission)*, $collections as xs:string*, $quality as xs:int?</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>rdf-insert</name>
        <arity>6</arity>
        <arguments>$triples as sem:triple*, $options as xs:string*, $permissions as element(sec:permission)*, $collections as xs:string*, $quality as xs:int?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>rdf-load</name>
        <arity>1</arity>
        <arguments>$location as xs:string</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>rdf-load</name>
        <arity>2</arity>
        <arguments>$location as xs:string, $options as xs:string*</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>rdf-load</name>
        <arity>3</arity>
        <arguments>$location as xs:string, $options as xs:string*, $http-opts as element()?</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>rdf-load</name>
        <arity>4</arity>
        <arguments>$location as xs:string, $options as xs:string*, $http-opts as element()?, $permissions as element(sec:permission)*</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>rdf-load</name>
        <arity>5</arity>
        <arguments>$location as xs:string, $options as xs:string*, $http-opts as element()?, $permissions as element(sec:permission)*, $collections as xs:string*</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>rdf-load</name>
        <arity>6</arity>
        <arguments>$location as xs:string, $options as xs:string*, $http-opts as element()?, $permissions as element(sec:permission)*, $collections as xs:string*, $quality as xs:int?</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>rdf-load</name>
        <arity>7</arity>
        <arguments>$location as xs:string, $options as xs:string*, $http-opts as element()?, $permissions as element(sec:permission)*, $collections as xs:string*, $quality as xs:int?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>rdf-parse</name>
        <arity>1</arity>
        <arguments>$in as item()</arguments>
        <returnType>sem:triple*</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>rdf-parse</name>
        <arity>2</arity>
        <arguments>$in as item(), $options as xs:string*</arguments>
        <returnType>sem:triple*</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>rdf-serialize</name>
        <arity>1</arity>
        <arguments>$triples as sem:triple*</arguments>
        <returnType>item()</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>rdf-serialize</name>
        <arity>2</arity>
        <arguments>$triples as sem:triple*, $options as xs:string*</arguments>
        <returnType>item()</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>sameTerm</name>
        <arity>2</arity>
        <arguments>$a as xs:anyAtomicType, $b as xs:anyAtomicType</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>sparql</name>
        <arity>1</arity>
        <arguments>$sparql as xs:string</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>sparql</name>
        <arity>2</arity>
        <arguments>$sparql as xs:string, $bindings as map:map?</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>sparql</name>
        <arity>3</arity>
        <arguments>$sparql as xs:string, $bindings as map:map?, $options as xs:string*</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>sparql</name>
        <arity>4</arity>
        <arguments>$sparql as xs:string, $bindings as map:map?, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>sparql</name>
        <arity>5</arity>
        <arguments>$sparql as xs:string, $bindings as map:map?, $options as xs:string*, $query as cts:query?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>sparql-triples</name>
        <arity>2</arity>
        <arguments>$sparql as xs:string, $dataset as sem:triple*</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>sparql-triples</name>
        <arity>3</arity>
        <arguments>$sparql as xs:string, $dataset as sem:triple*, $bindings as map:map?</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>sparql-triples</name>
        <arity>4</arity>
        <arguments>$sparql as xs:string, $dataset as sem:triple*, $bindings as map:map?, $options as xs:string*</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>sparql-values</name>
        <arity>2</arity>
        <arguments>$sparql as xs:string, $values as map:map*</arguments>
        <returnType>map:map*</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>sparql-values</name>
        <arity>3</arity>
        <arguments>$sparql as xs:string, $values as map:map*, $options as xs:string*</arguments>
        <returnType>map:map*</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>sparql-values</name>
        <arity>4</arity>
        <arguments>$sparql as xs:string, $values as map:map*, $options as xs:string*, $query as cts:query?</arguments>
        <returnType>map:map*</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>sparql-values</name>
        <arity>5</arity>
        <arguments>$sparql as xs:string, $values as map:map*, $options as xs:string*, $query as cts:query?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>map:map*</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>timezone-string</name>
        <arity>1</arity>
        <arguments>$value as xs:dateTime</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>transitive-closure</name>
        <arity>3</arity>
        <arguments>$seeds as sem:iri*, $predicates as sem:iri*, $limit as xs:integer</arguments>
        <returnType>sem:iri*</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>triple</name>
        <arity>1</arity>
        <arguments>$subject_or_node as item()</arguments>
        <returnType>sem:triple</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>triple</name>
        <arity>2</arity>
        <arguments>$subject_or_node as item(), $predicate as xs:anyAtomicType</arguments>
        <returnType>sem:triple</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>triple</name>
        <arity>3</arity>
        <arguments>$subject_or_node as item(), $predicate as xs:anyAtomicType, $object as xs:anyAtomicType</arguments>
        <returnType>sem:triple</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>triple</name>
        <arity>4</arity>
        <arguments>$subject_or_node as item(), $predicate as xs:anyAtomicType, $object as xs:anyAtomicType, $graph as sem:iri?</arguments>
        <returnType>sem:triple</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>triple-graph</name>
        <arity>1</arity>
        <arguments>$triple as sem:triple</arguments>
        <returnType>sem:iri?</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>triple-object</name>
        <arity>1</arity>
        <arguments>$triple as sem:triple</arguments>
        <returnType>xs:anyAtomicType</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>triple-predicate</name>
        <arity>1</arity>
        <arguments>$triple as sem:triple</arguments>
        <returnType>xs:anyAtomicType</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>triple-subject</name>
        <arity>1</arity>
        <arguments>$triple as sem:triple</arguments>
        <returnType>xs:anyAtomicType</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>typed-literal</name>
        <arity>2</arity>
        <arguments>$value as xs:string, $datatype as sem:iri</arguments>
        <returnType>xs:anyAtomicType</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>unknown</name>
        <arity>2</arity>
        <arguments>$string as xs:string, $datatype as sem:iri</arguments>
        <returnType>sem:unknown</returnType>
    </function>
    <function>
        <prefix>sem</prefix>
        <name>unknown-datatype</name>
        <arity>1</arity>
        <arguments>$val as sem:unknown</arguments>
        <returnType>sem:iri</returnType>
    </function>
    <function>
        <prefix>spell</prefix>
        <name>double-metaphone</name>
        <arity>1</arity>
        <arguments>$word as xs:string</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>spell</prefix>
        <name>is-correct</name>
        <arity>2</arity>
        <arguments>$uri as xs:string*, $word as xs:string</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>spell</prefix>
        <name>levenshtein-distance</name>
        <arity>2</arity>
        <arguments>$str1 as xs:string, $str2 as xs:string</arguments>
        <returnType>xs:integer</returnType>
    </function>
    <function>
        <prefix>spell</prefix>
        <name>suggest</name>
        <arity>2</arity>
        <arguments>$uri as xs:string*, $word as xs:string</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>spell</prefix>
        <name>suggest</name>
        <arity>3</arity>
        <arguments>$uri as xs:string*, $word as xs:string, $options as node()?</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>spell</prefix>
        <name>suggest-detailed</name>
        <arity>2</arity>
        <arguments>$uri as xs:string*, $word as xs:string</arguments>
        <returnType>element(spell:suggestion)*</returnType>
    </function>
    <function>
        <prefix>spell</prefix>
        <name>suggest-detailed</name>
        <arity>3</arity>
        <arguments>$uri as xs:string*, $word as xs:string, $options as node()?</arguments>
        <returnType>element(spell:suggestion)*</returnType>
    </function>
    <function>
        <prefix>sql</prefix>
        <name>dateadd</name>
        <arity>3</arity>
        <arguments>$datepart as xs:string, $number as xs:integer, $date as item()</arguments>
        <returnType>The return data type is the data type of the date argument</returnType>
    </function>
    <function>
        <prefix>sql</prefix>
        <name>datediff</name>
        <arity>3</arity>
        <arguments>$datepart as xs:string, $startdate as item(), $enddate as item()</arguments>
        <returnType>xs:integer?</returnType>
    </function>
    <function>
        <prefix>sql</prefix>
        <name>datepart</name>
        <arity>2</arity>
        <arguments>$datepart as xs:string?, $date as xs:genericDateTimeArg</arguments>
        <returnType>xs:integer?</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>QName-from-key</name>
        <arity>1</arity>
        <arguments>$key as xs:string</arguments>
        <returnType>xs:QName</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>access</name>
        <arity>2</arity>
        <arguments>$uri as xs:string, $action as xs:string</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>add-response-header</name>
        <arity>2</arity>
        <arguments>$name as xs:string, $value as xs:string</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>add64</name>
        <arity>2</arity>
        <arguments>$x as xs:unsignedLong, $y as xs:unsignedLong</arguments>
        <returnType>xs:unsignedLong</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>amp</name>
        <arity>4</arity>
        <arguments>$namespace as xs:string, $localname as xs:string, $module-uri as xs:string, $database as xs:unsignedLong</arguments>
        <returnType>xs:integer</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>amp-roles</name>
        <arity>4</arity>
        <arguments>$namespace-uri as xs:string, $localname as xs:string, $document-uri as xs:string, $database-id as xs:unsignedLong</arguments>
        <returnType>xs:unsignedLong*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>and64</name>
        <arity>2</arity>
        <arguments>$x as xs:unsignedLong, $y as xs:unsignedLong</arguments>
        <returnType>xs:unsignedLong</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>annotation</name>
        <arity>2</arity>
        <arguments>$function as function(*), $name as xs:QName</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>apply</name>
        <arity>1</arity>
        <arguments>$function as xdmp:function</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>apply</name>
        <arity>2</arity>
        <arguments>$function as xdmp:function, $params-1-to-N as item()*</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>base64-decode</name>
        <arity>1</arity>
        <arguments>$encoded as xs:string</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>base64-encode</name>
        <arity>1</arity>
        <arguments>$plaintext as xs:string</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>binary-decode</name>
        <arity>2</arity>
        <arguments>$encoded as node(), $encoding-name as xs:string</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>binary-is-external</name>
        <arity>1</arity>
        <arguments>$source as binary()</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>binary-is-large</name>
        <arity>1</arity>
        <arguments>$source as binary()</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>binary-is-small</name>
        <arity>1</arity>
        <arguments>$source as binary()</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>binary-size</name>
        <arity>0</arity>
        <arguments/>
        <returnType>xs:unsignedLong?</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>binary-size</name>
        <arity>1</arity>
        <arguments>$source as binary()?</arguments>
        <returnType>xs:unsignedLong?</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>cache-status</name>
        <arity>0</arity>
        <arguments/>
        <returnType>element(cache-status)</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>cache-status</name>
        <arity>1</arity>
        <arguments>$host-id as xs:unsignedLong*</arguments>
        <returnType>element(cache-status)</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>can-grant-roles</name>
        <arity>1</arity>
        <arguments>$roles as xs:string*</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>castable-as</name>
        <arity>3</arity>
        <arguments>$namespace-uri as xs:string, $local-name as xs:string, $item as item()</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>cluster</name>
        <arity>0</arity>
        <arguments/>
        <returnType>xs:unsignedLong</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>cluster</name>
        <arity>1</arity>
        <arguments>$name as xs:string</arguments>
        <returnType>xs:unsignedLong</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>cluster-name</name>
        <arity>0</arity>
        <arguments/>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>cluster-name</name>
        <arity>1</arity>
        <arguments>$id as xs:unsignedLong</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>collation-canonical-uri</name>
        <arity>1</arity>
        <arguments>$collation-uri as xs:string</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>collection-delete</name>
        <arity>1</arity>
        <arguments>$uri as xs:string</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>collection-locks</name>
        <arity>0</arity>
        <arguments/>
        <returnType>document-node()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>collection-locks</name>
        <arity>1</arity>
        <arguments>$uri as xs:string*</arguments>
        <returnType>document-node()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>collection-properties</name>
        <arity>0</arity>
        <arguments/>
        <returnType>document-node()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>collection-properties</name>
        <arity>1</arity>
        <arguments>$uri as xs:string*</arguments>
        <returnType>document-node()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>configuration-timestamp</name>
        <arity>0</arity>
        <arguments/>
        <returnType>xs:unsignedLong?</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>configuration-timestamp</name>
        <arity>1</arity>
        <arguments>$name as xs:string</arguments>
        <returnType>xs:unsignedLong?</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>crypt</name>
        <arity>2</arity>
        <arguments>$password as xs:string, $salt as xs:string</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>crypt2</name>
        <arity>1</arity>
        <arguments>$password as xs:string</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>database</name>
        <arity>0</arity>
        <arguments/>
        <returnType>xs:unsignedLong</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>database</name>
        <arity>1</arity>
        <arguments>$name as xs:string</arguments>
        <returnType>xs:unsignedLong</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>database-backup</name>
        <arity>2</arity>
        <arguments>$forestIDs as unsignedLong*, $pathname as xs:string</arguments>
        <returnType>xs:unsignedLong</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>database-backup</name>
        <arity>3</arity>
        <arguments>$forestIDs as unsignedLong*, $pathname as xs:string, $journal-archiving as xs:boolean?</arguments>
        <returnType>xs:unsignedLong</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>database-backup</name>
        <arity>4</arity>
        <arguments>$forestIDs as unsignedLong*, $pathname as xs:string, $journal-archiving as xs:boolean?, $journal-archive-path as xs:string?</arguments>
        <returnType>xs:unsignedLong</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>database-backup</name>
        <arity>5</arity>
        <arguments>$forestIDs as unsignedLong*, $pathname as xs:string, $journal-archiving as xs:boolean?, $journal-archive-path as xs:string?, $lag-limit as xs:unsignedLong</arguments>
        <returnType>xs:unsignedLong</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>database-backup-cancel</name>
        <arity>1</arity>
        <arguments>$jobid as unsignedLong</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>database-backup-purge</name>
        <arity>2</arity>
        <arguments>$dir as xs:string, $keep-num-backups as xs:unsignedInt</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>database-backup-status</name>
        <arity>1</arity>
        <arguments>$jobid as unsignedLong</arguments>
        <returnType>element()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>database-backup-status</name>
        <arity>2</arity>
        <arguments>$jobid as unsignedLong, $hostid as unsignedLong</arguments>
        <returnType>element()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>database-backup-validate</name>
        <arity>2</arity>
        <arguments>$forestIDs as unsignedLong*, $pathname as xs:string</arguments>
        <returnType>element()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>database-backup-validate</name>
        <arity>3</arity>
        <arguments>$forestIDs as unsignedLong*, $pathname as xs:string, $include-replicas as xs:boolean?</arguments>
        <returnType>element()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>database-backup-validate</name>
        <arity>4</arity>
        <arguments>$forestIDs as unsignedLong*, $pathname as xs:string, $include-replicas as xs:boolean?, $journal-archiving as xs:boolean?</arguments>
        <returnType>element()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>database-backup-validate</name>
        <arity>5</arity>
        <arguments>$forestIDs as unsignedLong*, $pathname as xs:string, $include-replicas as xs:boolean?, $journal-archiving as xs:boolean?, $journal-archive-path as xs:string?</arguments>
        <returnType>element()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>database-backup-validate</name>
        <arity>6</arity>
        <arguments>$forestIDs as unsignedLong*, $pathname as xs:string, $include-replicas as xs:boolean?, $journal-archiving as xs:boolean?, $journal-archive-path as xs:string?, $lag-limit as xs:unsignedLong</arguments>
        <returnType>element()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>database-forests</name>
        <arity>1</arity>
        <arguments>$database-id as xs:unsignedLong</arguments>
        <returnType>xs:unsignedLong*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>database-forests</name>
        <arity>2</arity>
        <arguments>$database-id as xs:unsignedLong, $include-replicas as xs:boolean?</arguments>
        <returnType>xs:unsignedLong*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>database-global-nonblocking-timestamp</name>
        <arity>1</arity>
        <arguments>$database-id as xs:unsignedLong</arguments>
        <returnType>xs:unsignedLong</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>database-is-replica</name>
        <arity>1</arity>
        <arguments>$database-id as xs:unsignedLong</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>database-name</name>
        <arity>1</arity>
        <arguments>$database-id as xs:unsignedLong</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>database-nonblocking-timestamp</name>
        <arity>1</arity>
        <arguments>$database-id as xs:unsignedLong</arguments>
        <returnType>xs:unsignedLong</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>database-partition-forests</name>
        <arity>1</arity>
        <arguments>$value as item</arguments>
        <returnType>xs:positiveInteger*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>database-path-namespaces</name>
        <arity>1</arity>
        <arguments>$dbid as xs:ulong</arguments>
        <returnType>element()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>database-restore</name>
        <arity>2</arity>
        <arguments>$forestIDs as unsignedLong*, $pathname as xs:string</arguments>
        <returnType>xs:unsignedLong</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>database-restore</name>
        <arity>3</arity>
        <arguments>$forestIDs as unsignedLong*, $pathname as xs:string, $restoreToTime as xs:dateTime?</arguments>
        <returnType>xs:unsignedLong</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>database-restore</name>
        <arity>4</arity>
        <arguments>$forestIDs as unsignedLong*, $pathname as xs:string, $restoreToTime as xs:dateTime?, $journal-archiving as xs:boolean?</arguments>
        <returnType>xs:unsignedLong</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>database-restore</name>
        <arity>5</arity>
        <arguments>$forestIDs as unsignedLong*, $pathname as xs:string, $restoreToTime as xs:dateTime?, $journal-archiving as xs:boolean?, $journal-archive-path as xs:string?</arguments>
        <returnType>xs:unsignedLong</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>database-restore-cancel</name>
        <arity>1</arity>
        <arguments>$jobid as unsignedLong</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>database-restore-status</name>
        <arity>1</arity>
        <arguments>$jobid as unsignedLong</arguments>
        <returnType>element()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>database-restore-validate</name>
        <arity>2</arity>
        <arguments>$forestIDs as unsignedLong*, $pathname as xs:string</arguments>
        <returnType>element()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>database-restore-validate</name>
        <arity>3</arity>
        <arguments>$forestIDs as unsignedLong*, $pathname as xs:string, $restoreToTime as xs:dateTime?</arguments>
        <returnType>element()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>database-restore-validate</name>
        <arity>4</arity>
        <arguments>$forestIDs as unsignedLong*, $pathname as xs:string, $restoreToTime as xs:dateTime?, $include-replicas as xs:boolean?</arguments>
        <returnType>element()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>database-restore-validate</name>
        <arity>5</arity>
        <arguments>$forestIDs as unsignedLong*, $pathname as xs:string, $restoreToTime as xs:dateTime?, $include-replicas as xs:boolean?, $journal-archiving as xs:boolean?</arguments>
        <returnType>element()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>database-restore-validate</name>
        <arity>6</arity>
        <arguments>$forestIDs as unsignedLong*, $pathname as xs:string, $restoreToTime as xs:dateTime?, $include-replicas as xs:boolean?, $journal-archiving as xs:boolean?, $journal-archive-path as xs:string?</arguments>
        <returnType>element()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>dayname-from-date</name>
        <arity>1</arity>
        <arguments>$arg as xs:date?</arguments>
        <returnType>xs:string?</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>decode-from-NCName</name>
        <arity>1</arity>
        <arguments>$name as xs:string</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>default-collections</name>
        <arity>0</arity>
        <arguments/>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>default-collections</name>
        <arity>1</arity>
        <arguments>$uri as xs:string</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>default-permissions</name>
        <arity>0</arity>
        <arguments/>
        <returnType>element()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>default-permissions</name>
        <arity>1</arity>
        <arguments>$uri as xs:string</arguments>
        <returnType>element()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>describe</name>
        <arity>1</arity>
        <arguments>$item as item()*</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>describe</name>
        <arity>2</arity>
        <arguments>$item as item()*, $maxSequenceLength as xs:unsignedInt?</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>describe</name>
        <arity>3</arity>
        <arguments>$item as item()*, $maxSequenceLength as xs:unsignedInt?, $maxItemLength as xs:unsignedInt*</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>diacritic-less</name>
        <arity>1</arity>
        <arguments>$string as xs:string</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>directory</name>
        <arity>1</arity>
        <arguments>$uri as xs:string*</arguments>
        <returnType>document-node()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>directory</name>
        <arity>2</arity>
        <arguments>$uri as xs:string*, $depth as xs:string?</arguments>
        <returnType>document-node()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>directory-create</name>
        <arity>1</arity>
        <arguments>$uri as xs:string</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>directory-create</name>
        <arity>2</arity>
        <arguments>$uri as xs:string, $permissions as element(sec:permission)*</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>directory-create</name>
        <arity>3</arity>
        <arguments>$uri as xs:string, $permissions as element(sec:permission)*, $collections as xs:string*</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>directory-create</name>
        <arity>4</arity>
        <arguments>$uri as xs:string, $permissions as element(sec:permission)*, $collections as xs:string*, $quality as xs:int?</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>directory-create</name>
        <arity>5</arity>
        <arguments>$uri as xs:string, $permissions as element(sec:permission)*, $collections as xs:string*, $quality as xs:int?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>directory-delete</name>
        <arity>1</arity>
        <arguments>$uri as xs:string</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>directory-locks</name>
        <arity>1</arity>
        <arguments>$uri as xs:string*</arguments>
        <returnType>document-node()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>directory-locks</name>
        <arity>2</arity>
        <arguments>$uri as xs:string*, $depth as xs:string?</arguments>
        <returnType>document-node()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>directory-properties</name>
        <arity>1</arity>
        <arguments>$uri as xs:string</arguments>
        <returnType>document-node()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>directory-properties</name>
        <arity>2</arity>
        <arguments>$uri as xs:string, $depth as xs:string?</arguments>
        <returnType>document-node()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>document-add-collections</name>
        <arity>2</arity>
        <arguments>$uri as xs:string, $collections as xs:string*</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>document-add-permissions</name>
        <arity>2</arity>
        <arguments>$uri as xs:string, $permissions as element(sec:permission)*</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>document-add-properties</name>
        <arity>2</arity>
        <arguments>$uri as xs:string, $props as element()*</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>document-assign</name>
        <arity>2</arity>
        <arguments>$uri as xs:string, $forest-count as xs:positiveInteger</arguments>
        <returnType>xs:positiveInteger</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>document-assign</name>
        <arity>3</arity>
        <arguments>$uri as xs:string, $forest-count as xs:positiveInteger, $assignment-policy as xs:string</arguments>
        <returnType>xs:positiveInteger</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>document-delete</name>
        <arity>1</arity>
        <arguments>$uri as xs:string</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>document-filter</name>
        <arity>1</arity>
        <arguments>$doc as node()</arguments>
        <returnType>node()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>document-filter</name>
        <arity>2</arity>
        <arguments>$doc as node(), $options as node()?</arguments>
        <returnType>node()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>document-forest</name>
        <arity>1</arity>
        <arguments>$uri as xs:string</arguments>
        <returnType>xs:integer?</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>document-forest</name>
        <arity>2</arity>
        <arguments>$uri as xs:string, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>xs:integer?</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>document-get</name>
        <arity>1</arity>
        <arguments>$location as xs:string</arguments>
        <returnType>node()?</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>document-get</name>
        <arity>2</arity>
        <arguments>$location as xs:string, $options as node()?</arguments>
        <returnType>node()?</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>document-get-collections</name>
        <arity>1</arity>
        <arguments>$uri as xs:string</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>document-get-permissions</name>
        <arity>1</arity>
        <arguments>$uri as xs:string</arguments>
        <returnType>element()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>document-get-properties</name>
        <arity>2</arity>
        <arguments>$uri as xs:string, $property as xs:QName</arguments>
        <returnType>element()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>document-get-quality</name>
        <arity>1</arity>
        <arguments>$uri as xs:string</arguments>
        <returnType>xs:integer?</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>document-insert</name>
        <arity>2</arity>
        <arguments>$uri as xs:string, $root as node()</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>document-insert</name>
        <arity>3</arity>
        <arguments>$uri as xs:string, $root as node(), $permissions as element(sec:permission)*</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>document-insert</name>
        <arity>4</arity>
        <arguments>$uri as xs:string, $root as node(), $permissions as element(sec:permission)*, $collections as xs:string*</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>document-insert</name>
        <arity>5</arity>
        <arguments>$uri as xs:string, $root as node(), $permissions as element(sec:permission)*, $collections as xs:string*, $quality as xs:int?</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>document-insert</name>
        <arity>6</arity>
        <arguments>$uri as xs:string, $root as node(), $permissions as element(sec:permission)*, $collections as xs:string*, $quality as xs:int?, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>document-load</name>
        <arity>1</arity>
        <arguments>$location as xs:string</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>document-load</name>
        <arity>2</arity>
        <arguments>$location as xs:string, $options as node()?</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>document-locks</name>
        <arity>0</arity>
        <arguments/>
        <returnType>document-node()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>document-locks</name>
        <arity>1</arity>
        <arguments>$uri as xs:string*</arguments>
        <returnType>document-node()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>document-properties</name>
        <arity>0</arity>
        <arguments/>
        <returnType>document-node()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>document-properties</name>
        <arity>1</arity>
        <arguments>$uri as xs:string*</arguments>
        <returnType>document-node()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>document-remove-collections</name>
        <arity>2</arity>
        <arguments>$uri as xs:string, $collections as xs:string*</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>document-remove-permissions</name>
        <arity>2</arity>
        <arguments>$uri as xs:string, $permissions as element(sec:permission)*</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>document-remove-properties</name>
        <arity>2</arity>
        <arguments>$uri as xs:string, $property-names as xs:QName*</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>document-set-collections</name>
        <arity>2</arity>
        <arguments>$uri as xs:string, $collections as xs:string*</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>document-set-permissions</name>
        <arity>2</arity>
        <arguments>$uri as xs:string, $permissions as element(sec:permission)*</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>document-set-properties</name>
        <arity>2</arity>
        <arguments>$uri as xs:string, $props as element()*</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>document-set-property</name>
        <arity>2</arity>
        <arguments>$uri as xs:string, $prop as element()</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>document-set-quality</name>
        <arity>2</arity>
        <arguments>$uri as xs:string, $quality as xs:int</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>document-timestamp</name>
        <arity>1</arity>
        <arguments>$uri as xs:string</arguments>
        <returnType>xs:integer?</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>eager</name>
        <arity>1</arity>
        <arguments>$arg as item()*</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>element-content-type</name>
        <arity>1</arity>
        <arguments>$element as element()</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>email</name>
        <arity>1</arity>
        <arguments>$message as node()</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>encode-for-NCName</name>
        <arity>1</arity>
        <arguments>$name as xs:string</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>encoding-language-detect</name>
        <arity>1</arity>
        <arguments>$document as node()</arguments>
        <returnType>element()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>estimate</name>
        <arity>1</arity>
        <arguments>$expression as item()*</arguments>
        <returnType>xs:integer</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>estimate</name>
        <arity>2</arity>
        <arguments>$expression as item()*, $maximum as xs:double?</arguments>
        <returnType>xs:integer</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>eval</name>
        <arity>1</arity>
        <arguments>$xquery as xs:string</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>eval</name>
        <arity>2</arity>
        <arguments>$xquery as xs:string, $vars as item()*</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>eval</name>
        <arity>3</arity>
        <arguments>$xquery as xs:string, $vars as item()*, $options as node()?</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>eval-in</name>
        <arity>2</arity>
        <arguments>$xquery as xs:string, $ID as xs:unsignedLong</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>eval-in</name>
        <arity>3</arity>
        <arguments>$xquery as xs:string, $ID as xs:unsignedLong, $vars as item()*</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>eval-in</name>
        <arity>4</arity>
        <arguments>$xquery as xs:string, $ID as xs:unsignedLong, $vars as item()*, $modules as xs:unsignedLong?</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>eval-in</name>
        <arity>5</arity>
        <arguments>$xquery as xs:string, $ID as xs:unsignedLong, $vars as item()*, $modules as xs:unsignedLong?, $root as xs:string?</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>excel-convert</name>
        <arity>2</arity>
        <arguments>$doc as node(), $filename as xs:string</arguments>
        <returnType>node()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>excel-convert</name>
        <arity>3</arity>
        <arguments>$doc as node(), $filename as xs:string, $options as node()?</arguments>
        <returnType>node()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>exists</name>
        <arity>1</arity>
        <arguments>$expression as item()*</arguments>
        <returnType>xs:integer</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>external-binary</name>
        <arity>1</arity>
        <arguments>$path as xs:string</arguments>
        <returnType>binary()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>external-binary</name>
        <arity>2</arity>
        <arguments>$path as xs:string, $starting-location as xs:double</arguments>
        <returnType>binary()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>external-binary</name>
        <arity>3</arity>
        <arguments>$path as xs:string, $starting-location as xs:double, $length as xs:double</arguments>
        <returnType>binary()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>external-binary-path</name>
        <arity>1</arity>
        <arguments>$source as binary()</arguments>
        <returnType>xs:string?</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>external-security</name>
        <arity>1</arity>
        <arguments>$external-security as xs:string</arguments>
        <returnType>xs:integer</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>filesystem-directory</name>
        <arity>1</arity>
        <arguments>$pathname as xs:string</arguments>
        <returnType>element(dir:directory)</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>filesystem-file</name>
        <arity>1</arity>
        <arguments>$pathname as xs:string</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>filesystem-file-exists</name>
        <arity>1</arity>
        <arguments>$pathname as xs:string</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>filesystem-file-exists</name>
        <arity>2</arity>
        <arguments>$pathname as xs:string, $host as xs:unsignedLong?</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>filesystem-file-length</name>
        <arity>1</arity>
        <arguments>$pathname as xs:string</arguments>
        <returnType>xs:unsignedLong?</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>filesystem-filepath</name>
        <arity>1</arity>
        <arguments>$pathname as xs:string</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>foreign-cluster-status</name>
        <arity>2</arity>
        <arguments>$host-id as xs:unsignedLong, $foreign-cluster-id as xs:unsignedLong</arguments>
        <returnType>element(foreign-cluster-status)</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>forest</name>
        <arity>1</arity>
        <arguments>$name as xs:string</arguments>
        <returnType>xs:unsignedLong</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>forest-backup</name>
        <arity>2</arity>
        <arguments>$forestID as unsignedLong, $pathname as xs:string</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>forest-clear</name>
        <arity>1</arity>
        <arguments>$forestIDs as unsignedLong*</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>forest-counts</name>
        <arity>1</arity>
        <arguments>$forest-id as xs:unsignedLong</arguments>
        <returnType>element(forest-counts)</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>forest-counts</name>
        <arity>2</arity>
        <arguments>$forest-id as xs:unsignedLong, $show-elements as xs:string*</arguments>
        <returnType>element(forest-counts)</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>forest-counts</name>
        <arity>3</arity>
        <arguments>$forest-id as xs:unsignedLong, $show-elements as xs:string*, $options as xs:string*</arguments>
        <returnType>element(forest-counts)</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>forest-databases</name>
        <arity>1</arity>
        <arguments>$forest as xs:unsignedLong</arguments>
        <returnType>xs:unsignedLong</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>forest-host</name>
        <arity>1</arity>
        <arguments>$id as xs:unsignedLong</arguments>
        <returnType>xs:unsignedLong</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>forest-name</name>
        <arity>1</arity>
        <arguments>$id as xs:unsignedLong</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>forest-online</name>
        <arity>1</arity>
        <arguments>$forestID as unsignedLong</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>forest-online</name>
        <arity>2</arity>
        <arguments>$forestID as unsignedLong, $timestamp as unsignedLong</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>forest-online</name>
        <arity>3</arity>
        <arguments>$forestID as unsignedLong, $timestamp as unsignedLong, $isReplica as xs:boolean</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>forest-online</name>
        <arity>4</arity>
        <arguments>$forestID as unsignedLong, $timestamp as unsignedLong, $isReplica as xs:boolean, $syncingOk as xs:boolean</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>forest-open-replica</name>
        <arity>1</arity>
        <arguments>$forestIDs as unsignedLong*</arguments>
        <returnType>unsignedLong*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>forest-restart</name>
        <arity>1</arity>
        <arguments>$forestIDs as unsignedLong*</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>forest-restore</name>
        <arity>2</arity>
        <arguments>$forestID as unsignedLong, $pathname as xs:string</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>forest-rollback</name>
        <arity>2</arity>
        <arguments>$forestIDs as unsignedLong*, $timestamp as unsignedLong</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>forest-status</name>
        <arity>1</arity>
        <arguments>$forest-id as xs:unsignedLong</arguments>
        <returnType>element(forest-status)</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>forest-updates-allowed</name>
        <arity>1</arity>
        <arguments>$forest-id as xs:unsignedLong</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>format-number</name>
        <arity>8</arity>
        <arguments>$value as numeric, $picture as xs:string, $language as xs:string, $letter-value as xs:string, $ordchar as xs:string, $zero-padding as xs:string, $grouping-separator as xs:string, $grouping-size as xs:string</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>from-json</name>
        <arity>1</arity>
        <arguments>$arg as xs:string</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>function</name>
        <arity>1</arity>
        <arguments>$function as xs:QName</arguments>
        <returnType>xdmp:function</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>function</name>
        <arity>2</arity>
        <arguments>$function as xs:QName, $module-path as xs:string?</arguments>
        <returnType>xdmp:function</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>function-module</name>
        <arity>1</arity>
        <arguments>$function as xdmp:function</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>function-name</name>
        <arity>1</arity>
        <arguments>$function as xdmp:function</arguments>
        <returnType>xs:QName</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>function-parameter-name</name>
        <arity>2</arity>
        <arguments>$function as function(*), $position as xs:integer</arguments>
        <returnType>xs:QName</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>function-parameter-type</name>
        <arity>2</arity>
        <arguments>$function as function(*), $position as xs:integer</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>function-return-type</name>
        <arity>1</arity>
        <arguments>$function as function(*)</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>function-signature</name>
        <arity>1</arity>
        <arguments>$function as function(*)</arguments>
        <returnType>xs:string?</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>get</name>
        <arity>1</arity>
        <arguments>$path as xs:string</arguments>
        <returnType>node()?</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>get</name>
        <arity>2</arity>
        <arguments>$path as xs:string, $default-namespace as xs:string?</arguments>
        <returnType>node()?</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>get</name>
        <arity>3</arity>
        <arguments>$path as xs:string, $default-namespace as xs:string?, $options as xs:string*</arguments>
        <returnType>node()?</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>get-orphaned-binaries</name>
        <arity>1</arity>
        <arguments>$id as xs:unsignedLong</arguments>
        <returnType>xs:unsignedLong*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>get-request-body</name>
        <arity>0</arity>
        <arguments/>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>get-request-body</name>
        <arity>1</arity>
        <arguments>$format as xs:string?</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>get-request-field</name>
        <arity>1</arity>
        <arguments>$name as xs:string</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>get-request-field</name>
        <arity>2</arity>
        <arguments>$name as xs:string, $default as xs:string?</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>get-request-field-content-type</name>
        <arity>1</arity>
        <arguments>$field-name as xs:string</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>get-request-field-filename</name>
        <arity>1</arity>
        <arguments>$field-name as xs:string</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>get-request-header</name>
        <arity>1</arity>
        <arguments>$name as xs:string</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>get-request-header</name>
        <arity>2</arity>
        <arguments>$name as xs:string, $default as xs:string?</arguments>
        <returnType>xs:string*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>get-server-field</name>
        <arity>1</arity>
        <arguments>$name as xs:string</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>get-server-field</name>
        <arity>2</arity>
        <arguments>$name as xs:string, $default as item()*</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>get-session-field</name>
        <arity>1</arity>
        <arguments>$name as xs:string</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>get-session-field</name>
        <arity>2</arity>
        <arguments>$name as xs:string, $default as item()*</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>group</name>
        <arity>0</arity>
        <arguments/>
        <returnType>xs:unsignedLong</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>group</name>
        <arity>1</arity>
        <arguments>$name as xs:string</arguments>
        <returnType>xs:unsignedLong</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>group-hosts</name>
        <arity>0</arity>
        <arguments/>
        <returnType>xs:unsignedLong*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>group-hosts</name>
        <arity>1</arity>
        <arguments>$name as xs:unsignedLong</arguments>
        <returnType>xs:unsignedLong*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>group-name</name>
        <arity>0</arity>
        <arguments/>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>group-name</name>
        <arity>1</arity>
        <arguments>$name as xs:unsignedLong</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>group-servers</name>
        <arity>0</arity>
        <arguments/>
        <returnType>xs:unsignedLong*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>group-servers</name>
        <arity>1</arity>
        <arguments>$name as xs:unsignedLong</arguments>
        <returnType>xs:unsignedLong*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>gss-server-negotiate</name>
        <arity>1</arity>
        <arguments>$inputToken as xs:string</arguments>
        <returnType>element()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>gunzip</name>
        <arity>2</arity>
        <arguments>$gzipnode as binary(), $options as node()?</arguments>
        <returnType>node()+</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>gzip</name>
        <arity>1</arity>
        <arguments>$node as node()</arguments>
        <returnType>binary()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>has-privilege</name>
        <arity>2</arity>
        <arguments>$privileges as xs:string*, $kind as xs:string</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>hash32</name>
        <arity>1</arity>
        <arguments>$string as xs:string</arguments>
        <returnType>xs:unsignedInt</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>hash64</name>
        <arity>1</arity>
        <arguments>$string as xs:string</arguments>
        <returnType>xs:unsignedLong</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>hex-to-integer</name>
        <arity>1</arity>
        <arguments>$hex as xs:string</arguments>
        <returnType>xs:integer</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>hmac-md5</name>
        <arity>2</arity>
        <arguments>$secretkey as item(), $message as item()</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>hmac-md5</name>
        <arity>3</arity>
        <arguments>$secretkey as item(), $message as item(), $encoding as xs:string</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>hmac-sha1</name>
        <arity>2</arity>
        <arguments>$secretkey as item(), $message as xs:string</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>hmac-sha1</name>
        <arity>3</arity>
        <arguments>$secretkey as item(), $message as xs:string, $encoding as xs:string</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>hmac-sha256</name>
        <arity>2</arity>
        <arguments>$secretkey as item(), $message as item()</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>hmac-sha256</name>
        <arity>3</arity>
        <arguments>$secretkey as item(), $message as item(), $encoding as xs:string</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>hmac-sha512</name>
        <arity>2</arity>
        <arguments>$secretkey as item(), $message as item()</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>hmac-sha512</name>
        <arity>3</arity>
        <arguments>$secretkey as item(), $message as item(), $encoding as xs:string</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>host</name>
        <arity>0</arity>
        <arguments/>
        <returnType>xs:unsignedLong</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>host</name>
        <arity>1</arity>
        <arguments>$name as xs:string</arguments>
        <returnType>xs:unsignedLong</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>host-forests</name>
        <arity>1</arity>
        <arguments>$ID as xs:unsignedLong</arguments>
        <returnType>xs:unsignedLong*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>host-get-ssl-fips-enabled</name>
        <arity>1</arity>
        <arguments>$host-id as xs:unsignedLong*</arguments>
        <returnType>xs:boolean*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>host-name</name>
        <arity>1</arity>
        <arguments>$ID as xs:unsignedLong</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>host-status</name>
        <arity>1</arity>
        <arguments>$host-id as xs:unsignedLong*</arguments>
        <returnType>element(host-status)</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>http-delete</name>
        <arity>1</arity>
        <arguments>$uri as xs:string</arguments>
        <returnType>item()+</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>http-delete</name>
        <arity>2</arity>
        <arguments>$uri as xs:string, $options as node()?</arguments>
        <returnType>item()+</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>http-get</name>
        <arity>1</arity>
        <arguments>$uri as xs:string</arguments>
        <returnType>item()+</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>http-get</name>
        <arity>2</arity>
        <arguments>$uri as xs:string, $options as node()?</arguments>
        <returnType>item()+</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>http-head</name>
        <arity>1</arity>
        <arguments>$uri as xs:string</arguments>
        <returnType>item()+</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>http-head</name>
        <arity>2</arity>
        <arguments>$uri as xs:string, $options as node()?</arguments>
        <returnType>item()+</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>http-options</name>
        <arity>1</arity>
        <arguments>$uri as xs:string</arguments>
        <returnType>item()+</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>http-options</name>
        <arity>2</arity>
        <arguments>$uri as xs:string, $options as node()?</arguments>
        <returnType>item()+</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>http-post</name>
        <arity>1</arity>
        <arguments>$uri as xs:string</arguments>
        <returnType>item()+</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>http-post</name>
        <arity>2</arity>
        <arguments>$uri as xs:string, $options as node()?</arguments>
        <returnType>item()+</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>http-post</name>
        <arity>3</arity>
        <arguments>$uri as xs:string, $options as node()?, $data as node()?</arguments>
        <returnType>item()+</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>http-put</name>
        <arity>1</arity>
        <arguments>$uri as xs:string</arguments>
        <returnType>item()+</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>http-put</name>
        <arity>2</arity>
        <arguments>$uri as xs:string, $options as node()?</arguments>
        <returnType>item()+</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>http-put</name>
        <arity>3</arity>
        <arguments>$uri as xs:string, $options as node()?, $data as node()?</arguments>
        <returnType>item()+</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>integer-to-hex</name>
        <arity>1</arity>
        <arguments>$val as xs:integer</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>integer-to-octal</name>
        <arity>1</arity>
        <arguments>$val as xs:integer</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>invoke</name>
        <arity>1</arity>
        <arguments>$path as xs:string</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>invoke</name>
        <arity>2</arity>
        <arguments>$path as xs:string, $vars as item()*</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>invoke</name>
        <arity>3</arity>
        <arguments>$path as xs:string, $vars as item()*, $options as node()?</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>invoke-function</name>
        <arity>1</arity>
        <arguments>$path as function() as item()*</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>invoke-function</name>
        <arity>2</arity>
        <arguments>$path as function() as item()*, $options as node()?</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>invoke-in</name>
        <arity>2</arity>
        <arguments>$uri as xs:string, $ID as xs:unsignedLong</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>invoke-in</name>
        <arity>3</arity>
        <arguments>$uri as xs:string, $ID as xs:unsignedLong, $vars as item()*</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>invoke-in</name>
        <arity>4</arity>
        <arguments>$uri as xs:string, $ID as xs:unsignedLong, $vars as item()*, $modules as xs:unsignedLong?</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>invoke-in</name>
        <arity>5</arity>
        <arguments>$uri as xs:string, $ID as xs:unsignedLong, $vars as item()*, $modules as xs:unsignedLong?, $root as xs:string?</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>key-from-QName</name>
        <arity>1</arity>
        <arguments>$name as xs:QName</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>lazy</name>
        <arity>1</arity>
        <arguments>$arg as item()*</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>ldap-lookup</name>
        <arity>1</arity>
        <arguments>$DN as xs:string</arguments>
        <returnType>element()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>ldap-lookup</name>
        <arity>2</arity>
        <arguments>$DN as xs:string, $options as xs:string*</arguments>
        <returnType>element()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>ldap-search</name>
        <arity>1</arity>
        <arguments>$query as xs:string</arguments>
        <returnType>element()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>ldap-search</name>
        <arity>2</arity>
        <arguments>$query as xs:string, $options as xs:string*</arguments>
        <returnType>element()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>load</name>
        <arity>1</arity>
        <arguments>$path as xs:string</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>load</name>
        <arity>2</arity>
        <arguments>$path as xs:string, $uri as xs:string?</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>load</name>
        <arity>3</arity>
        <arguments>$path as xs:string, $uri as xs:string?, $permissions as element(sec:permission)*</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>load</name>
        <arity>4</arity>
        <arguments>$path as xs:string, $uri as xs:string?, $permissions as element(sec:permission)*, $collections as xs:string*</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>load</name>
        <arity>5</arity>
        <arguments>$path as xs:string, $uri as xs:string?, $permissions as element(sec:permission)*, $collections as xs:string*, $quality as xs:int?</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>load</name>
        <arity>6</arity>
        <arguments>$path as xs:string, $uri as xs:string?, $permissions as element(sec:permission)*, $collections as xs:string*, $quality as xs:int?, $default-namespace as xs:string?</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>load</name>
        <arity>7</arity>
        <arguments>$path as xs:string, $uri as xs:string?, $permissions as element(sec:permission)*, $collections as xs:string*, $quality as xs:int?, $default-namespace as xs:string?, $options as xs:string*</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>load</name>
        <arity>8</arity>
        <arguments>$path as xs:string, $uri as xs:string?, $permissions as element(sec:permission)*, $collections as xs:string*, $quality as xs:int?, $default-namespace as xs:string?, $options as xs:string*, $forest-ids as xs:unsignedLong*</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>lock-acquire</name>
        <arity>1</arity>
        <arguments>$uri as xs:string</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>lock-acquire</name>
        <arity>2</arity>
        <arguments>$uri as xs:string, $scope as xs:string?</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>lock-acquire</name>
        <arity>3</arity>
        <arguments>$uri as xs:string, $scope as xs:string?, $depth as xs:string?</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>lock-acquire</name>
        <arity>4</arity>
        <arguments>$uri as xs:string, $scope as xs:string?, $depth as xs:string?, $owner as item()?</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>lock-acquire</name>
        <arity>5</arity>
        <arguments>$uri as xs:string, $scope as xs:string?, $depth as xs:string?, $owner as item()?, $timeout as xs:unsignedLong?</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>lock-for-update</name>
        <arity>1</arity>
        <arguments>$uri as xs:string</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>lock-release</name>
        <arity>1</arity>
        <arguments>$uri as xs:string</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>log</name>
        <arity>1</arity>
        <arguments>$msg as item()*</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>log</name>
        <arity>2</arity>
        <arguments>$msg as item()*, $level as xs:string?</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>login</name>
        <arity>1</arity>
        <arguments>$name as xs:string</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>login</name>
        <arity>2</arity>
        <arguments>$name as xs:string, $password as xs:string?</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>login</name>
        <arity>3</arity>
        <arguments>$name as xs:string, $password as xs:string?, $set-session as xs:boolean?</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>login</name>
        <arity>4</arity>
        <arguments>$name as xs:string, $password as xs:string?, $set-session as xs:boolean?, $role-names as xs:string?</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>lshift64</name>
        <arity>2</arity>
        <arguments>$x as xs:unsignedLong, $y as xs:integer</arguments>
        <returnType>xs:unsignedLong</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>md5</name>
        <arity>1</arity>
        <arguments>$data as item()</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>md5</name>
        <arity>2</arity>
        <arguments>$data as item(), $encoding as xs:string</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>merge</name>
        <arity>0</arity>
        <arguments/>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>merge</name>
        <arity>1</arity>
        <arguments>$options as node()?</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>merge-cancel</name>
        <arity>2</arity>
        <arguments>$forest-ID as xs:unsignedLong, $merge-ID as xs:unsignedLong</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>month-name-from-date</name>
        <arity>1</arity>
        <arguments>$arg as xs:dateTime?</arguments>
        <returnType>xs:string?</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>mul64</name>
        <arity>2</arity>
        <arguments>$x as xs:unsignedLong, $y as xs:unsignedLong</arguments>
        <returnType>xs:unsignedLong</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>node-database</name>
        <arity>1</arity>
        <arguments>$node as node()</arguments>
        <returnType>xs:unsignedLong?</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>node-delete</name>
        <arity>1</arity>
        <arguments>$old as node()</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>node-insert-after</name>
        <arity>2</arity>
        <arguments>$sibling as node(), $new as node()</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>node-insert-before</name>
        <arity>2</arity>
        <arguments>$sibling as node(), $new as node()</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>node-insert-child</name>
        <arity>2</arity>
        <arguments>$parent as node(), $new as node()</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>node-kind</name>
        <arity>1</arity>
        <arguments>$node as node()?</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>node-replace</name>
        <arity>2</arity>
        <arguments>$old as node(), $new as node()</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>node-uri</name>
        <arity>1</arity>
        <arguments>$node as node()</arguments>
        <returnType>xs:string?</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>not64</name>
        <arity>1</arity>
        <arguments>$x as xs:unsignedLong</arguments>
        <returnType>xs:unsignedLong</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>octal-to-integer</name>
        <arity>1</arity>
        <arguments>$octal as xs:string</arguments>
        <returnType>xs:integer</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>or64</name>
        <arity>2</arity>
        <arguments>$x as xs:unsignedLong, $y as xs:unsignedLong</arguments>
        <returnType>xs:unsignedLong</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>parse-dateTime</name>
        <arity>2</arity>
        <arguments>$picture as xs:string, $value as xs:string</arguments>
        <returnType>xs:dateTime</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>parse-dateTime</name>
        <arity>3</arity>
        <arguments>$picture as xs:string, $value as xs:string, $language as xs:string</arguments>
        <returnType>xs:dateTime</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>parse-dateTime</name>
        <arity>4</arity>
        <arguments>$picture as xs:string, $value as xs:string, $language as xs:string, $calendar as xs:string</arguments>
        <returnType>xs:dateTime</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>parse-dateTime</name>
        <arity>5</arity>
        <arguments>$picture as xs:string, $value as xs:string, $language as xs:string, $calendar as xs:string, $country as xs:string</arguments>
        <returnType>xs:dateTime</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>parse-yymmdd</name>
        <arity>2</arity>
        <arguments>$picture as xs:string, $value as xs:string</arguments>
        <returnType>xs:dateTime</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>parse-yymmdd</name>
        <arity>3</arity>
        <arguments>$picture as xs:string, $value as xs:string, $language as xs:string</arguments>
        <returnType>xs:dateTime</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>parse-yymmdd</name>
        <arity>4</arity>
        <arguments>$picture as xs:string, $value as xs:string, $language as xs:string, $calendar as xs:string</arguments>
        <returnType>xs:dateTime</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>parse-yymmdd</name>
        <arity>5</arity>
        <arguments>$picture as xs:string, $value as xs:string, $language as xs:string, $calendar as xs:string, $country as xs:string</arguments>
        <returnType>xs:dateTime</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>path</name>
        <arity>1</arity>
        <arguments>$node as node()</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>path</name>
        <arity>2</arity>
        <arguments>$node as node(), $include-document as xs:boolean?</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>pdf-convert</name>
        <arity>2</arity>
        <arguments>$doc as node(), $filename as xs:string</arguments>
        <returnType>node()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>pdf-convert</name>
        <arity>3</arity>
        <arguments>$doc as node(), $filename as xs:string, $options as node()?</arguments>
        <returnType>node()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>permission</name>
        <arity>2</arity>
        <arguments>$role as xs:string, $capability as xs:string</arguments>
        <returnType>element()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>plan</name>
        <arity>1</arity>
        <arguments>$expression as item()*</arguments>
        <returnType>element()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>plan</name>
        <arity>2</arity>
        <arguments>$expression as item()*, $maximum as xs:double?</arguments>
        <returnType>element()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>plannable</name>
        <arity>1</arity>
        <arguments>$expression as item()</arguments>
        <returnType>xs:boolean</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>position</name>
        <arity>2</arity>
        <arguments>$test as xs:string?, $target as xs:string?</arguments>
        <returnType>xs:integer</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>position</name>
        <arity>3</arity>
        <arguments>$test as xs:string?, $target as xs:string?, $collation as xs:string</arguments>
        <returnType>xs:integer</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>powerpoint-convert</name>
        <arity>2</arity>
        <arguments>$doc as node(), $filename as xs:string</arguments>
        <returnType>node()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>powerpoint-convert</name>
        <arity>3</arity>
        <arguments>$doc as node(), $filename as xs:string, $options as node()?</arguments>
        <returnType>node()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>pretty-print</name>
        <arity>1</arity>
        <arguments>$xquery as xs:string</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>privilege</name>
        <arity>2</arity>
        <arguments>$action as xs:string, $kind as xs:string</arguments>
        <returnType>xs:integer</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>privilege-roles</name>
        <arity>2</arity>
        <arguments>$action as xs:string, $kind as xs:string</arguments>
        <returnType>xs:unsignedLong*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>quarter-from-date</name>
        <arity>1</arity>
        <arguments>$arg as xs:date?</arguments>
        <returnType>xs:integer?</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>query-trace</name>
        <arity>1</arity>
        <arguments>$enabled as xs:boolean</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>quote</name>
        <arity>1</arity>
        <arguments>$arg as item()*</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>quote</name>
        <arity>2</arity>
        <arguments>$arg as item()*, $options as node()?</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>random</name>
        <arity>0</arity>
        <arguments/>
        <returnType>xs:unsignedLong</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>random</name>
        <arity>1</arity>
        <arguments>$max as xs:unsignedLong</arguments>
        <returnType>xs:unsignedLong</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>redirect-response</name>
        <arity>1</arity>
        <arguments>$name as xs:string</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>remove-orphaned-binary</name>
        <arity>2</arity>
        <arguments>$forestID as xs:unsignedLong, $binaryID as xs:unsignedLong</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>request-cancel</name>
        <arity>3</arity>
        <arguments>$hostID as xs:unsignedLong, $serverID as xs:unsignedLong, $requestID as xs:unsignedLong</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>request-status</name>
        <arity>3</arity>
        <arguments>$host-id as xs:unsignedLong, $server-id as xs:unsignedLong, $request-id as xs:unsignedLong</arguments>
        <returnType>element(request-status)</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>resolve-uri</name>
        <arity>1</arity>
        <arguments>$relative as xs:string?</arguments>
        <returnType>xs:anyURI?</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>resolve-uri</name>
        <arity>2</arity>
        <arguments>$relative as xs:string?, $base as xs:string</arguments>
        <returnType>xs:anyURI?</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>restart</name>
        <arity>2</arity>
        <arguments>$hostIDs as unsignedLong*, $reason as xs:string</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>role</name>
        <arity>1</arity>
        <arguments>$role as xs:string</arguments>
        <returnType>xs:integer</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>role-roles</name>
        <arity>1</arity>
        <arguments>$name as xs:string</arguments>
        <returnType>xs:unsignedLong*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>rshift64</name>
        <arity>2</arity>
        <arguments>$x as xs:unsignedLong, $y as xs:integer</arguments>
        <returnType>xs:unsignedLong</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>save</name>
        <arity>2</arity>
        <arguments>$path as xs:string, $node as node()</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>save</name>
        <arity>3</arity>
        <arguments>$path as xs:string, $node as node(), $options as node()?</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>schema-database</name>
        <arity>0</arity>
        <arguments/>
        <returnType>xs:unsignedLong</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>schema-database</name>
        <arity>1</arity>
        <arguments>$database-id as xs:unsignedLong?</arguments>
        <returnType>xs:unsignedLong</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>security-assert</name>
        <arity>2</arity>
        <arguments>$privileges as xs:string*, $kind as xs:string</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>security-database</name>
        <arity>0</arity>
        <arguments/>
        <returnType>xs:unsignedLong</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>security-database</name>
        <arity>1</arity>
        <arguments>$database-id as xs:unsignedLong?</arguments>
        <returnType>xs:unsignedLong</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>server</name>
        <arity>0</arity>
        <arguments/>
        <returnType>xs:unsignedLong+</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>server</name>
        <arity>1</arity>
        <arguments>$name as xs:string</arguments>
        <returnType>xs:unsignedLong+</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>server</name>
        <arity>2</arity>
        <arguments>$name as xs:string, $group as xs:unsignedLong</arguments>
        <returnType>xs:unsignedLong+</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>server-name</name>
        <arity>1</arity>
        <arguments>$id as xs:unsignedLong</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>server-status</name>
        <arity>2</arity>
        <arguments>$host-id as xs:unsignedLong, $server-id as xs:unsignedLong</arguments>
        <returnType>element(server-status)</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>set</name>
        <arity>2</arity>
        <arguments>$variable as item()*, $expr as item()*</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>set-request-time-limit</name>
        <arity>1</arity>
        <arguments>$time-limit as xs:unsignedInt</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>set-request-time-limit</name>
        <arity>2</arity>
        <arguments>$time-limit as xs:unsignedInt, $hostID as xs:unsignedLong?</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>set-request-time-limit</name>
        <arity>3</arity>
        <arguments>$time-limit as xs:unsignedInt, $hostID as xs:unsignedLong?, $serverID as xs:unsignedLong?</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>set-request-time-limit</name>
        <arity>4</arity>
        <arguments>$time-limit as xs:unsignedInt, $hostID as xs:unsignedLong?, $serverID as xs:unsignedLong?, $requestID as xs:unsignedLong?</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>set-response-code</name>
        <arity>2</arity>
        <arguments>$code as xs:integer, $message as xs:string</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>set-response-content-type</name>
        <arity>1</arity>
        <arguments>$name as xs:string</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>set-response-encoding</name>
        <arity>1</arity>
        <arguments>$encoding as xs:string</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>set-server-field</name>
        <arity>2</arity>
        <arguments>$name as xs:string, $value as item()*</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>set-server-field-privilege</name>
        <arity>2</arity>
        <arguments>$name as xs:string, $privilege as xs:string?</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>set-session-field</name>
        <arity>2</arity>
        <arguments>$name as xs:string, $value as item()*</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>set-transaction-mode</name>
        <arity>1</arity>
        <arguments>$value as xs:string</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>set-transaction-name</name>
        <arity>3</arity>
        <arguments>$name as xs:string, $host-id as xs:unsignedLong, $txn-id as xs:unsignedLong</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>set-transaction-time-limit</name>
        <arity>3</arity>
        <arguments>$time-limit as xs:unsignedInt, $host-id as xs:unsignedLong, $txn-id as xs:unsignedLong</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>sha1</name>
        <arity>1</arity>
        <arguments>$data as item()</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>sha1</name>
        <arity>2</arity>
        <arguments>$data as item(), $encoding as xs:string</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>sha256</name>
        <arity>1</arity>
        <arguments>$data as item()</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>sha256</name>
        <arity>2</arity>
        <arguments>$data as item(), $encoding as xs:string</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>sha384</name>
        <arity>1</arity>
        <arguments>$data as item()</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>sha384</name>
        <arity>2</arity>
        <arguments>$data as item(), $encoding as xs:string</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>sha512</name>
        <arity>1</arity>
        <arguments>$data as item()</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>sha512</name>
        <arity>2</arity>
        <arguments>$data as item(), $encoding as xs:string</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>shutdown</name>
        <arity>2</arity>
        <arguments>$hostIDs as unsignedLong*, $reason as xs:string</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>sleep</name>
        <arity>1</arity>
        <arguments>$msec as xs:unsignedInt</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>spawn</name>
        <arity>1</arity>
        <arguments>$path as xs:string</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>spawn</name>
        <arity>2</arity>
        <arguments>$path as xs:string, $vars as item()*</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>spawn</name>
        <arity>3</arity>
        <arguments>$path as xs:string, $vars as item()*, $options as node()?</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>spawn-function</name>
        <arity>1</arity>
        <arguments>$function as function() as item()*</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>spawn-function</name>
        <arity>2</arity>
        <arguments>$function as function() as item()*, $options as node()?</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>spawn-in</name>
        <arity>2</arity>
        <arguments>$path as xs:string, $ID as xs:unsignedLong</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>spawn-in</name>
        <arity>3</arity>
        <arguments>$path as xs:string, $ID as xs:unsignedLong, $vars as item()*</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>spawn-in</name>
        <arity>4</arity>
        <arguments>$path as xs:string, $ID as xs:unsignedLong, $vars as item()*, $modules as xs:unsignedLong?</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>spawn-in</name>
        <arity>5</arity>
        <arguments>$path as xs:string, $ID as xs:unsignedLong, $vars as item()*, $modules as xs:unsignedLong?, $root as xs:string?</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>sql</name>
        <arity>1</arity>
        <arguments>$sql as xs:string</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>sql</name>
        <arity>2</arity>
        <arguments>$sql as xs:string, $options as xs:string*</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>start-journal-archiving</name>
        <arity>2</arity>
        <arguments>$forestIDs as unsignedInt*, $journal-archive-path as xs:string</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>start-journal-archiving</name>
        <arity>3</arity>
        <arguments>$forestIDs as unsignedInt*, $journal-archive-path as xs:string, $lag-limit as xs:unsignedLong</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>step64</name>
        <arity>2</arity>
        <arguments>$initial as xs:unsignedLong, $step as xs:unsignedLong</arguments>
        <returnType>xs:unsignedLong</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>stop-journal-archiving</name>
        <arity>1</arity>
        <arguments>$forestIDs as unsignedLong</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>strftime</name>
        <arity>2</arity>
        <arguments>$format as xs:string, $value as xs:dateTime</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>subbinary</name>
        <arity>2</arity>
        <arguments>$source as binary(), $starting-location as xs:double</arguments>
        <returnType>binary()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>subbinary</name>
        <arity>3</arity>
        <arguments>$source as binary(), $starting-location as xs:double, $length as xs:double</arguments>
        <returnType>binary()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>tidy</name>
        <arity>1</arity>
        <arguments>$doc as xs:string</arguments>
        <returnType>node()+</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>tidy</name>
        <arity>2</arity>
        <arguments>$doc as xs:string, $options as node()?</arguments>
        <returnType>node()+</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>timestamp-to-wallclock</name>
        <arity>1</arity>
        <arguments>$timestamp as xs:unsignedLong</arguments>
        <returnType>xs:dateTime</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>to-json</name>
        <arity>1</arity>
        <arguments>$item as item()*</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>trace</name>
        <arity>2</arity>
        <arguments>$name as xs:string, $value as item()*</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>transaction</name>
        <arity>2</arity>
        <arguments>$txn-name as xs:string, $host-id as xs:unsignedLong</arguments>
        <returnType>xs:unsignedLong*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>transaction-commit</name>
        <arity>2</arity>
        <arguments>$host-id as xs:unsignedLong, $txn-id as xs:unsignedLong</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>transaction-rollback</name>
        <arity>2</arity>
        <arguments>$host-id as xs:unsignedLong, $txn-id as xs:unsignedLong</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>triggers-database</name>
        <arity>0</arity>
        <arguments/>
        <returnType>xs:unsignedLong</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>triggers-database</name>
        <arity>1</arity>
        <arguments>$database-id as xs:unsignedLong?</arguments>
        <returnType>xs:unsignedLong</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>type</name>
        <arity>1</arity>
        <arguments>$value as xs:anyAtomicType</arguments>
        <returnType>xs:QName</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>unpath</name>
        <arity>1</arity>
        <arguments>$expr as xs:string</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>unquote</name>
        <arity>1</arity>
        <arguments>$arg as xs:string</arguments>
        <returnType>document-node()+</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>unquote</name>
        <arity>2</arity>
        <arguments>$arg as xs:string, $default-namespace as xs:string?</arguments>
        <returnType>document-node()+</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>unquote</name>
        <arity>3</arity>
        <arguments>$arg as xs:string, $default-namespace as xs:string?, $options as xs:string*</arguments>
        <returnType>document-node()+</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>uri-content-type</name>
        <arity>1</arity>
        <arguments>$uri as xs:string</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>uri-format</name>
        <arity>1</arity>
        <arguments>$uri as xs:string</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>uri-is-file</name>
        <arity>1</arity>
        <arguments>$uri as xs:string</arguments>
        <returnType>xs:boolean?</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>url-decode</name>
        <arity>1</arity>
        <arguments>$encoded as xs:string</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>url-encode</name>
        <arity>1</arity>
        <arguments>$plaintext as xs:string</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>url-encode</name>
        <arity>2</arity>
        <arguments>$plaintext as xs:string, $noSpacePlus as xs:boolean?</arguments>
        <returnType>xs:string</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>user</name>
        <arity>1</arity>
        <arguments>$user as xs:string</arguments>
        <returnType>xs:integer</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>user</name>
        <arity>2</arity>
        <arguments>$user as xs:string, $extSecId as xs:unsignedLong</arguments>
        <returnType>xs:integer</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>user</name>
        <arity>3</arity>
        <arguments>$user as xs:string, $extSecId as xs:unsignedLong, $secDbFirst as xs:boolean</arguments>
        <returnType>xs:integer</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>user-external-security</name>
        <arity>1</arity>
        <arguments>$user-id as xs:unsignedLong</arguments>
        <returnType>element(external-user)?</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>user-last-login</name>
        <arity>1</arity>
        <arguments>$user as xs:unsignedLong</arguments>
        <returnType>element(last-login)?</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>user-roles</name>
        <arity>1</arity>
        <arguments>$name as xs:string</arguments>
        <returnType>xs:unsignedLong*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>validate</name>
        <arity>1</arity>
        <arguments>$node as node()</arguments>
        <returnType>element(xdmp:validation-errors)</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>validate</name>
        <arity>2</arity>
        <arguments>$node as node(), $mode as xs:string</arguments>
        <returnType>element(xdmp:validation-errors)</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>validate</name>
        <arity>3</arity>
        <arguments>$node as node(), $mode as xs:string, $typeName as xs:QName</arguments>
        <returnType>element(xdmp:validation-errors)</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>value</name>
        <arity>1</arity>
        <arguments>$expr as xs:string</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>wallclock-to-timestamp</name>
        <arity>1</arity>
        <arguments>$timestamp as xs:dateTime</arguments>
        <returnType>xs:unsignedLong</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>week-from-date</name>
        <arity>1</arity>
        <arguments>$arg as xs:date?</arguments>
        <returnType>xs:integer?</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>weekday-from-date</name>
        <arity>1</arity>
        <arguments>$arg as xs:date?</arguments>
        <returnType>xs:integer?</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>with-namespaces</name>
        <arity>2</arity>
        <arguments>$nsbindings as xs:string*, $expr as item()*</arguments>
        <returnType>item()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>word-convert</name>
        <arity>2</arity>
        <arguments>$doc as node(), $filename as xs:string</arguments>
        <returnType>node()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>word-convert</name>
        <arity>3</arity>
        <arguments>$doc as node(), $filename as xs:string, $options as node()?</arguments>
        <returnType>node()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>x509-certificate-extract</name>
        <arity>1</arity>
        <arguments>$cert as xs:string</arguments>
        <returnType>An XML representation of the certificate.</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>xa-complete</name>
        <arity>4</arity>
        <arguments>$forestID as unsignedLong, $txn-id as xs:unsignedLong, $commit as xs:boolean, $remember as xs:boolean</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>xa-forget</name>
        <arity>2</arity>
        <arguments>$forestID as unsignedLong, $txn-id as xs:unsignedLong</arguments>
        <returnType>empty-sequence()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>xor64</name>
        <arity>2</arity>
        <arguments>$x as xs:unsignedLong, $y as xs:unsignedLong</arguments>
        <returnType>xs:unsignedLong</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>xslt-eval</name>
        <arity>2</arity>
        <arguments>$stylesheet as element(), $input as node()?</arguments>
        <returnType>document-node()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>xslt-eval</name>
        <arity>3</arity>
        <arguments>$stylesheet as element(), $input as node()?, $params as map:map?</arguments>
        <returnType>document-node()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>xslt-eval</name>
        <arity>4</arity>
        <arguments>$stylesheet as element(), $input as node()?, $params as map:map?, $options as node()?</arguments>
        <returnType>document-node()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>xslt-invoke</name>
        <arity>2</arity>
        <arguments>$path as xs:string, $input as node()?</arguments>
        <returnType>document-node()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>xslt-invoke</name>
        <arity>3</arity>
        <arguments>$path as xs:string, $input as node()?, $params as map:map?</arguments>
        <returnType>document-node()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>xslt-invoke</name>
        <arity>4</arity>
        <arguments>$path as xs:string, $input as node()?, $params as map:map?, $options as node()?</arguments>
        <returnType>document-node()*</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>yearday-from-date</name>
        <arity>1</arity>
        <arguments>$arg as xs:date?</arguments>
        <returnType>xs:integer?</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>zip-create</name>
        <arity>2</arity>
        <arguments>$manifest as node(), $nodes as node()+</arguments>
        <returnType>binary()</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>zip-get</name>
        <arity>2</arity>
        <arguments>$zipfile as binary(), $name as xs:string</arguments>
        <returnType>node()+</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>zip-get</name>
        <arity>3</arity>
        <arguments>$zipfile as binary(), $name as xs:string, $options as node()?</arguments>
        <returnType>node()+</returnType>
    </function>
    <function>
        <prefix>xdmp</prefix>
        <name>zip-manifest</name>
        <arity>1</arity>
        <arguments>$zipfile as binary()</arguments>
        <returnType>node()</returnType>
    </function>
</functions>